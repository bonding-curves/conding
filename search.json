[
  {
    "objectID": "pamm/exponential.html",
    "href": "pamm/exponential.html",
    "title": "Exponential Function",
    "section": "",
    "text": "import param as pm\nimport panel as pn\nimport numpy as np\nimport pandas as pd\nimport hvplot.pandas\nimport holoviews as hv\n\n\n\n\n\n\n\n\n\n\n\n\nclass Exponential(pm.Parameterized):\n    x = pm.Magnitude(0.5, softbounds=(0.01,1), step=0.01)\n    m = pm.Number(0.5, bounds=(0,2))\n    n = pm.Number(1, bounds=(0,2))\n    \n    def f(self, x):\n        return self.m * x ** self.n\n        \n    def curve(self):\n        xs = np.linspace(*self.param['x'].softbounds, num=1000)\n        y = [self.f(x) for x in xs]\n        return pd.DataFrame({'x':xs,'y':y})\n    \n    def view_x_point(self):\n        return hv.Points((self.x, self.f(self.x))).opts(color='k', size=10)\n    \n    def view_curve(self):\n        return self.curve().hvplot.line(x='x',y='y', xlim=(0,2), ylim=(0,2)) * self.view_x_point()\n    \n    def view_x_value(self):\n        return pn.Column('#### Selected Value', f'({round(self.x,2)}, {round(self.f(self.x),2)})')\n    \n    def view(self):\n        return pn.Row(pn.Column(self, self.view_x_value), self.view_curve)\n\ne = Exponential()\n\ne.view()"
  },
  {
    "objectID": "pamm/abc.html",
    "href": "pamm/abc.html",
    "title": "Augmented Bonding Curve",
    "section": "",
    "text": "AugmentedBondingCurve\n\n AugmentedBondingCurve (**params)\n\nparams(common_pool=Number, entry_tribute=Magnitude, exit_tribute=Magnitude, mint_tribute=Number, total_mint_deposit=Number, total_mint_price=Number, deposit=Number, m=Number, marketcap=Number, mint=Action, mint_amount=Number, mint_price=Number, n=Number, new_price=Number, price=Number, reserve_balance=Number, reserve_ratio=Number, supply=Number, name=String) \u001b[1;32mParameters of ‘AugmentedBondingCurve’ ===================================== \u001b[0m \u001b[1;31mParameters changed from their default values are marked in red.\u001b[0m \u001b[1;36mSoft bound values are marked in cyan.\u001b[0m C/V= Constant/Variable, RO/RW = ReadOnly/ReadWrite, AN=Allow None\n\u001b[1;34mName Value Type Bounds Mode \u001b[0m\nsupply 80 Number (1,\u001b[1;36m 100\u001b[0m) V RW price 2 Number (0.01,\u001b[1;36m 5\u001b[0m) V RW reserve_balance 40 Number (1,\u001b[1;36m 500\u001b[0m) V RW marketcap 160 Number C RW reserve_ratio 0.25 Number C RW n 0.0 Number C RW m 0.0 Number C RW mint_amount 1 Number V RW deposit 0.0 Number C RW mint_price 0.0 Number C RW new_price 0.0 Number C RW mint &lt;function BondingCurve. at 0x… Action V RW entry_tribute 0.22 Magnitude (0.0, 1.0) V RW exit_tribute 0.02 Magnitude (0.0, 1.0) V RW total_mint_deposit 0.0 Number C RW total_mint_price 0.0 Number C RW mint_tribute 0.0 Number C RW common_pool 0 Number (0,\u001b[1;36m 1000\u001b[0m) C RW\n\u001b[1;32mParameter docstrings: =====================\u001b[0m\n\u001b[1;34msupply: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mprice: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mreserve_balance: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmarketcap: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mreserve_ratio: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mn: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mm: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint_amount: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mdeposit: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint_price: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mnew_price: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mentry_tribute: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mexit_tribute: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mtotal_mint_deposit: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mtotal_mint_price: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mmint_tribute: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mcommon_pool: &lt; No docstring available &gt;\u001b[0m\n\nb = AugmentedBondingCurve(supply=40)\nb.view()\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nmints = np.random.randn(2) * 5 + 2\nfor m in mints:\n    b.mint_amount = m\n    b._mint()"
  },
  {
    "objectID": "samm/4-curve-stableswap-whitepaper-broken.html",
    "href": "samm/4-curve-stableswap-whitepaper-broken.html",
    "title": "conding",
    "section": "",
    "text": "import param as pm\nimport panel as pn\nimport pandas as pd\nimport hvplot.pandas\nimport holoviews as hv\nimport numpy as np\nimport numbers\nimport curvesim\nfrom curvesim.pool.stableswap import CurvePool as CurvesimPool\npn.extension()\n\n\n\nclass StableSwap(pm.Parameterized):\n    n = pm.Integer(3, doc=\"Number of coins.\")\n    balances = pm.List(default=[10]*3, item_type=numbers.Number)\n    leverage = pm.Integer(1, bounds=(0,100), doc=\"Chi leverage parameter in whitepaper\")\n    D = pm.Number(1, softbounds=(0, 50), bounds=(0, None), doc=\"Invariant constant to be discovered.\")\n    S = pm.Number(constant=True)\n    P = pm.Number(constant=True)\n    \n    def __init__(self, **params):\n        super().__init__(**params)\n        with pm.edit_constant(self):\n            self.S = np.sum(self.balances)\n            self.P = np.prod(self.balances)\n        self.update_balances()\n        \n    @pm.depends('balances', watch=True)\n    def update_balances(self):\n        with pm.edit_constant(self):\n            self.S = np.sum(self.balances)\n            self.P = np.prod(self.balances)\n            \n    def L(self, D):\n        \"\"\"Leveraged Sum Factor\"\"\"\n        return self.leverage * D ** (self.n-1)\n    \n    def K(self, D):\n        \"\"\"Constant Product\"\"\"\n        return (D / self.n) ** self.n\n        \n    def left_invariant(self, D):\n        \"\"\"Leveraged Sum plus Product\"\"\"\n        return self.L(D) * self.S + self.P\n    \n    def right_invariant(self, D):\n        \"\"\"Leveraged Constant plus Constant Product\"\"\"\n        return  self.L(D) * D +  self.K(D)\n    \n    def invariant_curves(self):\n        Ds = np.linspace(*s.param['D'].softbounds, num=10_000)\n        ls = self.left_invariant(Ds)\n        rs = self.right_invariant(Ds)\n        df = pd.DataFrame({'D':Ds,'ls':ls,'rs':rs, 'Invariant': np.abs(ls-rs)})\n        return df\n    \n    def minimum_invariant(self):\n        df = self.invariant_curves()\n        return df.iloc[[df['Invariant'].idxmin()]].T\n    \n    @pm.depends('n', 'balances', 'leverage')\n    def view_invariant_curves(self):\n        invariant_curves = self.invariant_curves()\n        invariant_curves_chart = invariant_curves.hvplot(x='D', y=['ls', 'rs', 'Invariant'])\n        invariant_curves_chart.opts(title='Invariant Curves')\n        return invariant_curves_chart\n    \n    def view_D(self):\n        D = hv.VLine(self.D).opts(color='black')\n        return D\n    \n    def view_chart(self):\n        chart = self.view_invariant_curves() * self.view_D()\n        return chart\n    \n    def view(self):\n        return pn.Row(self, pn.Column(self.view_chart, self.minimum_invariant))\n\n\ns = StableSwap()\ns.view()\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nclass StableSwap(pm.Parameterized):\n    n = pm.Integer(constant=True, doc=\"Number of coins.\")\n    balances = pm.List(default=[20, 30, 40], item_type=numbers.Number)\n    A = pm.Number(1, softbounds=(0, 100), bounds=(0, None))\n    D = pm.Number(1, softbounds=(1, 100), bounds=(1, None), doc=\"Invariant constant to be discovered.\")\n    leverage = pm.Number(constant=True, softbounds=(0,100), bounds=(0, None), doc=\"Chi leverage parameter in whitepaper\")\n    S = pm.Number(constant=True)\n    P = pm.Number(constant=True)\n    set_D = pm.Action(lambda self: self._set_D())\n    \n    \n    def __init__(self, **params):\n        super().__init__(**params)\n        self._set_D()\n        self.update_balances()\n        \n    @pm.depends('A', 'balances', watch=True)\n    def _set_D(self):\n        self.update_balances()\n        self.D = CurvesimPool(A=self.A, D=self.balances, n=self.n).D()\n        self.param['D'].softbounds = [self.D/4+1, self.D*2]\n        self.update_leverage()\n\n        \n    @pm.depends()\n    def update_balances(self):\n        with pm.edit_constant(self):\n            self.n = len(self.balances)\n            self.S = np.sum(self.balances)\n            self.P = np.prod(self.balances)\n            \n    @pm.depends()\n    def update_leverage(self):\n        with pm.edit_constant(self):\n            self.leverage = self.get_leverage(self.D)\n            \n    def get_leverage(self, D):\n        return self.A * self.P / self.K(D)\n            \n    def L(self, D):\n        \"\"\"Leveraged Sum Factor\"\"\"\n        return self.get_leverage(D) * D ** (self.n-1)\n    \n    def K(self, D):\n        \"\"\"Constant Product\"\"\"\n        return (D / self.n) ** self.n\n        \n    def left_invariant(self, D):\n        \"\"\"Leveraged Sum plus Product\"\"\"\n        return self.L(D) * self.S + self.P\n    \n    def right_invariant(self, D):\n        \"\"\"Leveraged Constant plus Constant Product\"\"\"\n        return  self.L(D) * D +  self.K(D)\n    \n    def invariant_curves(self):\n        Ds = np.linspace(*s.param['D'].softbounds, num=1000)\n        ls = self.left_invariant(Ds)\n        rs = self.right_invariant(Ds)\n        df = pd.DataFrame({'D':Ds,'ls':ls,'rs':rs, 'Invariant': np.abs(ls-rs)})\n        return df\n    \n    def minimum_invariant(self):\n        df = self.invariant_curves()\n        return df.iloc[[df['Invariant'].idxmin()]].T\n    \n    @pm.depends('n', 'balances', 'leverage')\n    def view_invariant_curves(self):\n        invariant_curves = self.invariant_curves()\n        invariant_curves_chart = invariant_curves.hvplot.area(x='D', y=['ls', 'rs', 'Invariant'])\n        invariant_curves_chart.opts(title='Invariant Curves')\n        return invariant_curves_chart\n    \n    def view_D(self):\n        D = hv.VLine(self.D).opts(color='black')\n        return D\n    \n    def view_chart(self):\n        chart = self.view_invariant_curves() * self.view_D()\n        return chart\n    \n    def view(self):\n        return pn.Row(self, self.view_chart)\n\n\ns = StableSwap()\ns.view()\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\np = [10**18, 10**30, 10**30]\nbalances = [\n    10**30,\n    10**18,\n    10**18,\n]\nvirtual_balances = [b * p // 10**18 for b, p in zip(balances, p)]\nN_COINS = 3\nA = 2000\n\ncurvesim_pool = CurvesimPool(A=A, D=[10,1,1], n=N_COINS)\n\ncurvesim_pool.D()\n\n\nclass CurvePool(pm.Parameterized):\n    A = pm.Integer(85, doc=\"Amplification Coefficient.\")\n    D = pm.Integer(doc=\"Virtual total balance.\")\n    n = pm.Integer(3, doc=\"Number of coins.\")\n    balances = pm.List(default=[10_000]*3, item_type=numbers.Number)\n    fee = pm.Number(0.0006)\n    \n    def get_D(self):\n        D = self.A * self.n ** self.n * sum(self.balances)\n    \n    def view(self):\n        return pn.Row(self)\n\n\npool = CurvePool()\n\npool.view()\n\n\n\n\n\n  \n\n\n\n\n\ndef mainnet_3pool_state():\n    \"\"\"Snapshot of Mainnet 3Pool values\"\"\"\n    p = [10**18, 10**30, 10**30]\n    balances = [\n        295949605740077243186725223,\n        284320067518878,\n        288200854907854,\n    ]\n    virtual_balances = [b * p // 10**18 for b, p in zip(balances, p)]\n\n    return {\n        \"N_COINS\": 3,\n        \"A\": 2000,\n        \"p\": p,\n        \"balances\": balances,\n        \"virtual_balances\": virtual_balances,\n        \"lp_tokens\": 849743149250065202008212976,\n        \"virtual_price\": 1022038799187029697,\n    }\n\n\ndef _vyper_3pool(mainnet_3pool_state):\n    \"\"\"Initialize vyper fixture using mainnet values.\"\"\"\n    lp_total_supply = mainnet_3pool_state[\"lp_tokens\"]\n    mock_filepath = os.path.join(_base_dir, \"lp_token_mock.vy\")\n    lp_token = boa.load(mock_filepath, lp_total_supply)\n\n    pool_filepath = os.path.join(_curve_dir, \"basepool.vy\")\n    owner = FAKE_ADDRESS\n    coins = [FAKE_ADDRESS] * 3\n    A = mainnet_3pool_state[\"A\"]\n    fee = 4 * 10**6\n    admin_fee = 5 * 10**9\n    pool = boa.load(pool_filepath, owner, coins, lp_token, A, fee, admin_fee)\n\n    balances = mainnet_3pool_state[\"balances\"]\n    pool.eval(f\"self.balances={balances}\")\n\n    return pool"
  },
  {
    "objectID": "samm/1-uniswap-mathv2.html",
    "href": "samm/1-uniswap-mathv2.html",
    "title": "Uniswap Constant Product AMM",
    "section": "",
    "text": "Uniswap\n\n Uniswap (**params)\n\nparams(K=Number, L=Number, _updating=Boolean, execution_price_x_y=Number, price_x_y=Number, swap=Action, switch_xy=Action, x=Number, x_in=Number, y=Number, y_out=Number, name=String) \u001b[1;32mParameters of ‘Uniswap’ ======================= \u001b[0m \u001b[1;31mParameters changed from their default values are marked in red.\u001b[0m \u001b[1;36mSoft bound values are marked in cyan.\u001b[0m C/V= Constant/Variable, RO/RW = ReadOnly/ReadWrite, AN=Allow None\n\u001b[1;34mName Value Type Bounds Mode \u001b[0m\n_updating False Boolean (0, 1) V RW K 0.0 Number (0, None) C RW L 0.0 Number (0,\u001b[1;36m 100\u001b[0m) V RW x 20 Number (0,\u001b[1;36m 100\u001b[0m) V RW y 80 Number (0,\u001b[1;36m 100\u001b[0m) V RW price_x_y 0.0 Number C RW execution_price_x_y 0.0 Number C RW x_in 1 Number (\u001b[1;36m-100\u001b[0m,\u001b[1;36m 100\u001b[0m) V RW y_out 0.0 Number C RW switch_xy &lt;function Uniswap. at 0x7fdbb… Action V RW swap &lt;function Uniswap. at 0x7fdba… Action V RW\n\u001b[1;32mParameter docstrings: =====================\u001b[0m\n\u001b[1;34m_updating: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mK: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mL: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mx: &lt; No docstring available &gt;\u001b[0m \u001b[1;34my: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mprice_x_y: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mexecution_price_x_y: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mx_in: &lt; No docstring available &gt;\u001b[0m \u001b[1;34my_out: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mswitch_xy: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mswap: &lt; No docstring available &gt;\u001b[0m\n\npn.config.throttled = False\n\nuniswap = Uniswap()\nuniswap.view()"
  },
  {
    "objectID": "dune/b_tec_historic_arbitrage.html",
    "href": "dune/b_tec_historic_arbitrage.html",
    "title": "TEC Historic Arbitrage Depth Analysis",
    "section": "",
    "text": "from conding.pamm.abc import AugmentedBondingCurve\nfrom conding.dune.tec import TECDashboard\nimport pandas as pd\ntec = TECDashboard()"
  },
  {
    "objectID": "dune/b_tec_historic_arbitrage.html#current-state-of-the-abc",
    "href": "dune/b_tec_historic_arbitrage.html#current-state-of-the-abc",
    "title": "TEC Historic Arbitrage Depth Analysis",
    "section": "Current State of the ABC",
    "text": "Current State of the ABC\n\nsupply = tec.market_information.supply(update_cache=False)\nreserve_balance = tec.reserves.reserve_pool_value(update_cache=False)\ncommon_pool = tec.reserves.common_pool_value(update_cache=False)\n\n(supply, reserve_balance, common_pool)\n\n(1750465.5804850913, 204683.0971086502, 394287.5652695778)\n\n\n\nentry_tribute = 0.02\nexit_tribute  = 0.12\nprice = 0.53\n\nInitialize an ABC model for the current state of TEC ABC.\n\nabc = AugmentedBondingCurve(\n    price=price, \n    supply=supply, \n    reserve_balance=reserve_balance, \n    entry_tribute=entry_tribute, \n    exit_tribute=exit_tribute, \n    common_pool=common_pool\n)\n\n\nabc.view()"
  },
  {
    "objectID": "dune/b_tec_historic_arbitrage.html#loading-historical-tec-abc-mints-and-burns",
    "href": "dune/b_tec_historic_arbitrage.html#loading-historical-tec-abc-mints-and-burns",
    "title": "TEC Historic Arbitrage Depth Analysis",
    "section": "Loading Historical TEC ABC Mints and Burns",
    "text": "Loading Historical TEC ABC Mints and Burns\n\n### Load ABC token sales data\nabc_token_sales = tec.trades.abc_token_sales()\n\n\n### Shift data such that purchase amount is aligned with initial state instead of final state\nabc_token_sales[['paidAmount','amountBought','tribute', 'price_per_token']] = abc_token_sales[['paidAmount','amountBought','tribute', 'price_per_token']].shift(1)\nabc_token_sales[['diff']] = abc_token_sales[['diff']].shift(2)\n\n\n### Convert sells to negative buys\nabc_token_sales.loc[abc_token_sales['action']=='Sell', ['paidAmount', 'amountBought']] = -abc_token_sales[abc_token_sales['action']=='Sell'][['paidAmount', 'amountBought']] \n\n\n### Rename the columns to match\nabc_token_sales = abc_token_sales.rename({\n    'cumulative_supply':'supply', \n    'price_per_token': 'execution_price', \n    'paidAmount': 'deposit', \n    'amountBought': 'mint_amount'\n},axis=1)\n\nabc_token_sales.head()\n\n\n\n\n\n\n\n\nblock_time\ntx_hash\naction\nreserve_balance\nsupply\ndeposit\nmint_amount\ntribute\nexecution_price\ndiff\n\n\n\n\n0\n2023-06-26T22:04:15Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204683.097109\n1.750466e+06\nNaN\nNaN\nNaN\nNaN\nNone\n\n\n1\n2023-06-26T21:47:40Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204697.179384\n1.750489e+06\n-12.392402\n-23.869\n1.689873\n0.589982\nNone\n\n\n2\n2023-06-26T20:19:40Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204702.182617\n1.750498e+06\n-4.402845\n-8.480\n0.600388\n0.590004\n-3.7380200181174674e-05\n\n\n3\n2023-06-26T16:33:00Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n205179.513522\n1.751306e+06\n-420.051197\n-808.267\n57.279709\n0.590561\n-0.0009441995507981619\n\n\n4\n2023-06-26T15:32:50Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n205238.631598\n1.751406e+06\n-52.023907\n-100.000\n7.094169\n0.591181\n-0.0010495683879868413\n\n\n\n\n\n\n\n\nabc_token_sales.tail()\n\n\n\n\n\n\n\n\nblock_time\ntx_hash\naction\nreserve_balance\nsupply\ndeposit\nmint_amount\ntribute\nexecution_price\ndiff\n\n\n\n\n2256\n2022-01-25T09:22:35Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n604458.124\n2.169520e+06\n142.00134\n101.007155\n40.05166\n1.802377\n9.93344313166947e-05\n\n\n2257\n2022-01-25T09:22:25Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n603288.124\n2.168687e+06\n1170.00000\n832.959191\n330.00000\n1.800809\n0.0008703824349471555\n\n\n2258\n2022-01-25T09:22:25Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602059.624\n2.167811e+06\n1228.50000\n876.002320\n346.50000\n1.797940\n0.0024093177328280064\n\n\n2259\n2022-01-25T09:22:20Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602058.220\n2.167810e+06\n1.40400\n1.001965\n0.39600\n1.796470\n0.0008194194584005584\n\n\n2260\n2022-01-25T09:20:50Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602057.440\n2.167810e+06\n0.78000\n0.556648\n0.22000\n1.796467\n-0.000818635981467873\n\n\n\n\n\n\n\n\nparams = abc_token_sales.iloc[-1][['reserve_balance', 'supply', 'mint_amount', 'execution_price']].rename({'execution_price': 'price'}).to_dict()\nparams\n\n{'reserve_balance': 602057.4400000001,\n 'supply': 2167809.597439592,\n 'mint_amount': 0.5566480773143038,\n 'price': 1.7964671769365756}\n\n\n\nabc = AugmentedBondingCurve(**params)\nabc\n\nAugmentedBondingCurve(common_pool=0, deposit=1.0000007023336366, entry_tribute=0.22, exit_tribute=0.02, m=4.036365233897545e-35, marketcap=3894398.787648318, mint=&lt;function BondingCurve.&lt;lambda&gt;&gt;, mint_amount=0.5566480773143038, mint_price=1.7964684386559011, mint_tribute=0.2820514801453846, n=5.468483783953102, name='AugmentedBondingCurve213265', new_price=1.7964696995229361, price=1.7964671769365756, reserve_balance=602057.4400000001, reserve_ratio=0.1545957342400366, supply=2167809.597439592, total_mint_deposit=1.2820521824790212, total_mint_price=2.3031646649434627)\n\n\n\n# abc.param['mint_amount'].softbounds = (None,None)\nabc.view()\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nimport time\n\nfor m in abc_token_sales.iloc[::-1]['mint_amount'][:100]:\n    abc.mint_amount = m\n    print(m)\n    abc._mint()\n    time.sleep(0.1)\n\n0.5566480773143038\n1.0019650820226569\n876.002319751027\n832.9591914857209\n101.00715501863084\n5.547676859504\n5.547619474949967\n110.94034079646104\n55.46156624867915\n8131.741054767892\n273.0596543892236\n10462.795797870484\n58.14294414162144\n9589.525931735388\n205.12271163993043\n422.1633860624301\n22.252272900065297\n220.43271700833668\n26.260043239337996\n0.0525213575342681\n943.4692982454072\n3.669931548936833\n1570.5531658264983\n1463.9093708565815\n1201.865272136768\n208.04436163746345\n124.71727904804423\n472.9656605467586\n78.43005559067952\n2.5968287082472115\n519.1172734894132\n43.06452750039873\n1.608368273195331\n518.5780937292312\n3.112957374276876\n673.2588888784026\n70.30170344081803\n4.534898669033506\n38.70272138857421\n103.50708882955468\n25.87370436123435\n930.637271268966\n103.30625543028152\n5.164799603200605\n2.2683645417885767\n6.260678543983593\n109.72478484648371\n670.8630098126143\n154.69756089644596\n103.10736749078173\n10.309666192804976\n10.30947157923806\n521.5737840113995\n103.26830709775146\n312.27724952055564\n56.822686701769854\n230.27951189241224\n51.94333343012359\n215.0874718244898\n146.97467240916404\n28.032883737417\n25.694348045373783\n410.9453880591241\n312.1120169545381\n21.273084678815536\n2219.5933918085266\n51.10737695371567\n102.23160739473384\n101.6704943907655\n5.108571756499344\n2268.0889762963197\n100.21329249091804\n3043.43861398355\n303.41709131212934\n32.95464857121173\n505.2923367981235\n252.4718405428499\n50.48043725292471\n254.35077789164376\n25.73131240972813\n504.29207140624567\n181.43183900568732\n1.5620694722064228\n0.5038924304063093\n498.6268796158749\n531.9496872400268\n50.29247709474156\n24.64163352524051\n221.2223143397101\n108.06488649453286\n75.38152480149843\n25.12487749476326\n207905.25541046244\n174.9758270776424\n85.65798943074329\n32.54644367170936\n3418.617039777708\n239.9681459640134\n3.8248045554768746\n0.695416399136881"
  },
  {
    "objectID": "dune/tec.html",
    "href": "dune/tec.html",
    "title": "TEC Dune Dashboard",
    "section": "",
    "text": "TECDashboard\n\n TECDashboard ()\n\nInterface to the TEC Dune Analytics dashboard.\nInitialize TEC Dashboard Client\n\ntec = TECDashboard()\n\n\ntec.bonding_curve.total_liquidity_over_time_honeyswap_aggregated()\n\n\n\n\n\n\n\n\nblock_day\npool\ncontract_address\nday_liq\nnet_liq\n\n\n\n\n0\n2022-01-13\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n100.000000\n100.000000\n\n\n1\n2022-01-15\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-4.848705\n95.151295\n\n\n2\n2022-01-21\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-26.411040\n68.740255\n\n\n3\n2022-01-24\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-10.000000\n58.740255\n\n\n4\n2022-01-25\n0x2769e63ebc6cf6e9803ed87aea125eb596a38f95\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n5062.703964\n5121.444219\n\n\n...\n...\n...\n...\n...\n...\n\n\n1666\n2023-05-12\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-11.642099\n44445.743806\n\n\n1667\n2023-05-13\n0x2769e63ebc6cf6e9803ed87aea125eb596a38f95\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-0.529340\n44445.214466\n\n\n1668\n2023-05-13\n0x4c8692cc08b14fa8b74b6f313394b8997aad721d\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n-2.349070\n44442.865396\n\n\n1669\n2023-05-13\n0x71641d6656ffb673f471ea292ea09ac528cc4df2\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n0.529340\n44443.394736\n\n\n1670\n2023-05-13\n0x98f6a05f0cf0a07c9cb988ee152f346b34d6b8da\n0x5df8339c5e282ee48c0c7ce8a7d01a73d38b3b27\n2.349070\n44445.743806\n\n\n\n\n1671 rows × 5 columns\n\n\n\n\ntec.bonding_curve.TEC_total_supply()\n\n\n\n\n\n\n\n\ndate\nmint_burn\ntotal_amount\ntotal_supply\n\n\n\n\n0\n2022-01-13\nMINT\n1.700000e+03\n1.700000e+03\n\n\n1\n2022-01-19\nMINT\n1.992737e+06\n1.994437e+06\n\n\n2\n2022-01-25\nMINT\n4.371255e+05\n2.431563e+06\n\n\n3\n2022-01-26\nMINT\n9.996543e+03\n2.441559e+06\n\n\n4\n2022-01-27\nMINT\n7.169769e+03\n2.448729e+06\n\n\n...\n...\n...\n...\n...\n\n\n420\n2023-05-09\nBURN\n-6.953870e+02\n1.784793e+06\n\n\n421\n2023-05-10\nBURN\n-1.291830e+03\n1.783501e+06\n\n\n422\n2023-05-11\nBURN\n-4.913560e+02\n1.783010e+06\n\n\n423\n2023-05-12\nBURN\n-8.395300e+03\n1.774614e+06\n\n\n424\n2023-05-13\nBURN\n-1.114350e+02\n1.774503e+06\n\n\n\n\n425 rows × 4 columns\n\n\n\n\ntec.market_information.view_price_chart(normalize=True)\n\n\n\n\n\n  \n\n\n\n\nMarket Information\n\n# mint_price = tec.market_information.mint_price()\nhoneyswap_tec_sales = tec.market_information.honeyswap_tec_sales()\nmarket_price = tec.market_information.market_price()\n# burn_price = tec.market_information.burn_price()\nprice_chart = tec.market_information.price_chart()\nholders_and_supply = tec.market_information.holders_and_supply()\ntotal_holders = tec.market_information.total_holders()\nsupply = tec.market_information.supply()\nholders_over_time = tec.market_information.holders_over_time()\nholders_distribution = tec.market_information.holders_distribution()\n\n\nsupply\n\n1750465.5804850913\n\n\nTreasury Inflows and Outflows\n\n# multisig_values_over_time = tec.treasury_inflows_outflows.multisig_values_over_time()\n# multisig_treasuries = tec.treasury_inflows_outflows.multisig_treasuries()\n# multisig_distribution = tec.treasury_inflows_outflows.multisig_distribution()\n# multisig_treasuries_movement = tec.treasury_inflows_outflows.multisig_treasuries_movement()\n\nTEC Reserves\n\nreserve_pool = tec.reserves.reserve_pool()\ntotal_pool_value = tec.reserves.total_pool_value()\nreserve_pool_value = tec.reserves.reserve_pool_value()\ncommon_pool_value = tec.reserves.common_pool_value()\n# RENAME COLUMN -&gt; commons_pool_balance_over_time = tec.tec_reserves.commons_pool_balance_over_time()\n# RENAME COLUMN -&gt; reserve_balance_over_time = tec.tec_reserves.reserve_balance_over_time()\n\n\nreserve_pool\n\ntotal_pool_value      598970.662378\nreserve_pool_value    204683.097109\ncommon_pool_value     394287.565270\nName: 0, dtype: float64\n\n\n\ntotal_pool_value\n\n598970.6623782296\n\n\n\nreserve_pool_value\n\n204683.09710865008\n\n\n\ncommon_pool_value\n\n394287.565269578\n\n\nTEC Trades\n\nabc_top_ten_trades = tec.trades.abc_top_ten_trades()\nhoneyswap_top_ten_trades = tec.trades.honeyswap_top_ten_trades()\nabc_token_sales = tec.trades.abc_token_sales()\nhoneyswap_tec_sales = tec.trades.honeyswap_tec_sales()\n\n\nabc_token_sales\n\n\n\n\n\n\n\n\nblock_time\ntx_hash\naction\nreserve_balance\ncumulative_supply\npaidAmount\namountBought\ntribute\nprice_per_token\ndiff\n\n\n\n\n0\n2023-06-26T22:04:15Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204683.097109\n1.750466e+06\n12.392402\n23.869000\n1.689873\n0.589982\n-3.7380200181174674e-05\n\n\n1\n2023-06-26T21:47:40Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204697.179384\n1.750489e+06\n4.402845\n8.480000\n0.600388\n0.590004\n-0.0009441995507981619\n\n\n2\n2023-06-26T20:19:40Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n204702.182617\n1.750498e+06\n420.051197\n808.267000\n57.279709\n0.590561\n-0.0010495683879868413\n\n\n3\n2023-06-26T16:33:00Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n205179.513522\n1.751306e+06\n52.023907\n100.000000\n7.094169\n0.591181\n-0.00014095766091884557\n\n\n4\n2023-06-26T15:32:50Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nSell\n205238.631598\n1.751406e+06\n11.469246\n22.043000\n1.563988\n0.591264\n-3.806698185355733e-05\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2256\n2022-01-25T09:22:35Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n604458.124000\n2.169520e+06\n1170.000000\n832.959191\n330.000000\n1.800809\n0.0024093177328280064\n\n\n2257\n2022-01-25T09:22:25Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n603288.124000\n2.168687e+06\n1228.500000\n876.002320\n346.500000\n1.797940\n0.0008194194584005584\n\n\n2258\n2022-01-25T09:22:25Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602059.624000\n2.167811e+06\n1.404000\n1.001965\n0.396000\n1.796470\n-0.000818635981467873\n\n\n2259\n2022-01-25T09:22:20Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602058.220000\n2.167810e+06\n0.780000\n0.556648\n0.220000\n1.796467\n0.14916270354914457\n\n\n2260\n2022-01-25T09:20:50Z\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\nBuy\n602057.440000\n2.167810e+06\n206700.000000\n173372.442773\n58300.000000\n1.528501\n&lt;nil&gt;\n\n\n\n\n2261 rows × 10 columns\n\n\n\nTEC ABC Tributes\n\ntribute_distribution = tec.abc_tributes.tribute_distribution()\n\n\ntribute_distribution\n\n\n\n\n\n\n\n\ndate\naction\nsum(tribute)\ntribute_total\n\n\n\n\n0\n2022-05-01T00:00:00Z\nBuy\n500.410920\n96376.240815\n\n\n1\n2022-05-01T00:00:00Z\nSell\n26956.671309\n96376.240815\n\n\n2\n2022-06-01T00:00:00Z\nBuy\n18.424300\n96376.240815\n\n\n3\n2022-06-01T00:00:00Z\nSell\n9637.008165\n96376.240815\n\n\n4\n2022-07-01T00:00:00Z\nBuy\n46.280000\n96376.240815\n\n\n5\n2022-07-01T00:00:00Z\nSell\n875.231330\n96376.240815\n\n\n6\n2022-08-01T00:00:00Z\nBuy\n84.000440\n96376.240815\n\n\n7\n2022-08-01T00:00:00Z\nSell\n3578.698760\n96376.240815\n\n\n8\n2022-09-01T00:00:00Z\nBuy\n440.034000\n96376.240815\n\n\n9\n2022-09-01T00:00:00Z\nSell\n6524.963118\n96376.240815\n\n\n10\n2022-10-01T00:00:00Z\nBuy\n0.448273\n96376.240815\n\n\n11\n2022-10-01T00:00:00Z\nSell\n7265.726778\n96376.240815\n\n\n12\n2022-11-01T00:00:00Z\nBuy\n42.080000\n96376.240815\n\n\n13\n2022-11-01T00:00:00Z\nSell\n7948.406669\n96376.240815\n\n\n14\n2022-12-01T00:00:00Z\nBuy\n1.260000\n96376.240815\n\n\n15\n2022-12-01T00:00:00Z\nSell\n6767.473366\n96376.240815\n\n\n16\n2023-01-01T00:00:00Z\nBuy\n0.310000\n96376.240815\n\n\n17\n2023-01-01T00:00:00Z\nSell\n3886.310413\n96376.240815\n\n\n18\n2023-02-01T00:00:00Z\nBuy\n0.100000\n96376.240815\n\n\n19\n2023-02-01T00:00:00Z\nSell\n4413.471438\n96376.240815\n\n\n20\n2023-03-01T00:00:00Z\nBuy\n3.100000\n96376.240815\n\n\n21\n2023-03-01T00:00:00Z\nSell\n13877.419531\n96376.240815\n\n\n22\n2023-04-01T00:00:00Z\nBuy\n460.600000\n96376.240815\n\n\n23\n2023-04-01T00:00:00Z\nSell\n1922.144389\n96376.240815\n\n\n24\n2023-05-01T00:00:00Z\nSell\n1125.667616\n96376.240815\n\n\n\n\n\n\n\nTEC Conviction Voting\n\ntec_proposals = tec.conviction.tec_proposals()\n\n\ntec_proposals.head()\n\n\n\n\n\n\n\n\nevt_block_time\ntitle\nbeneficiary\nStatus\nevt_tx_hash\n\n\n\n\n0\n2023-04-04T15:47:40Z\nEngineering Praise for Twitter collaboratively...\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\nExecuted\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\n\n\n1\n2023-03-23T20:20:25Z\nBonding Curve Research Group\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\nExecuted\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\n\n\n2\n2023-03-22T18:42:40Z\nBonding Curve Research Group\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\nCancelled\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\n\n\n3\n2023-03-01T20:21:50Z\nToken Engineering Stakeholder Study\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\nExecuted\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t...\n\n\n4\n2022-12-19T18:30:00Z\nSupport TE Academy (Part 2)\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\nExecuted\n&lt;a href=\"https://blockscout.com/xdai/mainnet/t..."
  },
  {
    "objectID": "dune/a_tec_historic_arbitrage.html",
    "href": "dune/a_tec_historic_arbitrage.html",
    "title": "TEC Historic Arbitrage Depth Analysis",
    "section": "",
    "text": "from conding.samm.uniswap import Uniswap\nfrom conding.pamm.abc import AugmentedBondingCurve\nfrom conding.dune.tec import TECDashboard\nimport pandas as pd\nimport hvplot.pandas\n\n\ntec = TECDashboard()\n\n\nHoneyswap Liquidity\n\nhoneyswap = tec.bonding_curve.total_liquidity_over_time_honeyswap_aggregated()[['block_day', 'day_liq', 'net_liq']]\nhoneyswap['block_day'] = pd.to_datetime(honeyswap['block_day'], utc=True)\nhoneyswap.head()\n\n\n\n\n\n\n\n\nblock_day\nday_liq\nnet_liq\n\n\n\n\n0\n2022-01-13 00:00:00+00:00\n100.000000\n100.000000\n\n\n1\n2022-01-15 00:00:00+00:00\n-4.848705\n95.151295\n\n\n2\n2022-01-21 00:00:00+00:00\n-26.411040\n68.740255\n\n\n3\n2022-01-24 00:00:00+00:00\n-10.000000\n58.740255\n\n\n4\n2022-01-25 00:00:00+00:00\n5062.703964\n5121.444219\n\n\n\n\n\n\n\n\nhoneyswap.hvplot.line(x='block_day')\n\n\n\n\n\n  \n\n\n\n\n\n\nTEC Total Supply\n\ntec_mint_burn = tec.bonding_curve.TEC_total_supply()\ntec_mint_burn['date'] = pd.to_datetime(tec_mint_burn['date'], utc=True)\ntec_mint_burn.head()\n\n\n\n\n\n\n\n\ndate\nmint_burn\ntotal_amount\ntotal_supply\n\n\n\n\n0\n2022-01-13 00:00:00+00:00\nMINT\n1.700000e+03\n1.700000e+03\n\n\n1\n2022-01-19 00:00:00+00:00\nMINT\n1.992737e+06\n1.994437e+06\n\n\n2\n2022-01-25 00:00:00+00:00\nMINT\n4.371255e+05\n2.431563e+06\n\n\n3\n2022-01-26 00:00:00+00:00\nMINT\n9.996543e+03\n2.441559e+06\n\n\n4\n2022-01-27 00:00:00+00:00\nMINT\n7.169769e+03\n2.448729e+06\n\n\n\n\n\n\n\n\ntec_mint_burn.hvplot.line(x='date', y=['total_amount', 'total_supply'])\n\n\n\n\n\n  \n\n\n\n\n\n\nTEC Honeyswap Price\n\nprice_chart = tec.market_information.price_chart()\nprice_chart['block_date'] = pd.to_datetime(price_chart['block_date'], utc=True)\nprice_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']] = price_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']].astype(float)\nprice_chart\n\n\n\n\n\n\n\n\nblock_date\navg_mint_price\navg_burn_price\navg_mkt_price\n\n\n\n\n0\n2022-01-25 00:00:00+00:00\n1.956346\n2.221616\n2.305090\n\n\n1\n2022-01-26 00:00:00+00:00\n2.893026\n2.221616\n2.592010\n\n\n2\n2022-01-27 00:00:00+00:00\n2.864334\n2.221616\n2.540351\n\n\n3\n2022-01-28 00:00:00+00:00\n2.826360\n2.249963\n2.477631\n\n\n4\n2022-01-29 00:00:00+00:00\n2.943731\n2.250424\n2.683242\n\n\n...\n...\n...\n...\n...\n\n\n468\n2023-05-09 00:00:00+00:00\n0.562285\n0.562285\n0.525828\n\n\n469\n2023-05-10 00:00:00+00:00\n0.560807\n0.560807\n0.532157\n\n\n470\n2023-05-11 00:00:00+00:00\n0.559642\n0.559642\n0.521647\n\n\n471\n2023-05-12 00:00:00+00:00\n0.554095\n0.554095\n0.448885\n\n\n472\n2023-05-13 00:00:00+00:00\n0.548682\n0.548682\n0.525231\n\n\n\n\n473 rows × 4 columns\n\n\n\n\nprice_chart.hvplot.line(x='block_date')\n\n\n\n\n\n  \n\n\n\n\n\n\nCombining The Data\n\ndf = pd.merge(honeyswap, tec_mint_burn, left_on='block_day', right_on='date', how='outer')\ndf['date'] = df['date'].fillna(df['block_day'])\ndf = df.sort_values('date')\ndf[['net_liq', 'total_supply']] = df[['net_liq', 'total_supply']].ffill().bfill()\ndf = df.fillna(0)\ndf = df.drop('block_day',axis=1)\ndf.hvplot.line(x='date', y=['net_liq','total_supply'])\n\n\n\n\n\n  \n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nday_liq\nnet_liq\nmint_burn\ntotal_amount\ntotal_supply\n\n\ndate\n\n\n\n\n\n\n\n\n\n2022-01-13 00:00:00+00:00\n100.000000\n100.000000\nMINT\n1.700000e+03\n1.700000e+03\n\n\n2022-01-15 00:00:00+00:00\n-4.848705\n95.151295\n0\n0.000000e+00\n1.700000e+03\n\n\n2022-01-19 00:00:00+00:00\n0.000000\n95.151295\nMINT\n1.992737e+06\n1.994437e+06\n\n\n2022-01-21 00:00:00+00:00\n-26.411040\n68.740255\n0\n0.000000e+00\n1.994437e+06\n\n\n2022-01-24 00:00:00+00:00\n-10.000000\n58.740255\n0\n0.000000e+00\n1.994437e+06\n\n\n\n\n\n\n\n\ndf_merged = pd.merge(df, price_chart, left_on='date', right_on='block_date', how='outer')\ndf_merged['date'] = df_merged['date'].fillna(df_merged['block_date'])\ndf_merged = df_merged.sort_values('date')\ndf_merged[['net_liq', 'total_supply', 'avg_mint_price', 'avg_burn_price', 'avg_mkt_price']] = df_merged[['net_liq', 'total_supply', 'avg_mint_price', 'avg_burn_price', 'avg_mkt_price']].ffill().bfill()\ndf_merged = df_merged.drop('block_date',axis=1)\n\n\ndf_merged.hvplot.line(x='date', y=['net_liq','total_supply', 'avg_mkt_price'])\n\n\n\n\n\n  \n\n\n\n\n\ndf_merged\n\n\n\n\n\n\n\n\nday_liq\nnet_liq\ndate\nmint_burn\ntotal_amount\ntotal_supply\navg_mint_price\navg_burn_price\navg_mkt_price\n\n\n\n\n0\n100.000000\n100.000000\n2022-01-13 00:00:00+00:00\nMINT\n1.700000e+03\n1.700000e+03\n1.956346\n2.221616\n2.305090\n\n\n1\n-4.848705\n95.151295\n2022-01-15 00:00:00+00:00\n0\n0.000000e+00\n1.700000e+03\n1.956346\n2.221616\n2.305090\n\n\n2\n0.000000\n95.151295\n2022-01-19 00:00:00+00:00\nMINT\n1.992737e+06\n1.994437e+06\n1.956346\n2.221616\n2.305090\n\n\n3\n-26.411040\n68.740255\n2022-01-21 00:00:00+00:00\n0\n0.000000e+00\n1.994437e+06\n1.956346\n2.221616\n2.305090\n\n\n4\n-10.000000\n58.740255\n2022-01-24 00:00:00+00:00\n0\n0.000000e+00\n1.994437e+06\n1.956346\n2.221616\n2.305090\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1822\n-0.721563\n44457.385906\n2023-05-12 00:00:00+00:00\nBURN\n-8.395300e+03\n1.774614e+06\n0.554095\n0.554095\n0.448885\n\n\n1826\n-2.349070\n44442.865396\n2023-05-13 00:00:00+00:00\nBURN\n-1.114350e+02\n1.774503e+06\n0.548682\n0.548682\n0.525231\n\n\n1827\n0.529340\n44443.394736\n2023-05-13 00:00:00+00:00\nBURN\n-1.114350e+02\n1.774503e+06\n0.548682\n0.548682\n0.525231\n\n\n1825\n-0.529340\n44445.214466\n2023-05-13 00:00:00+00:00\nBURN\n-1.114350e+02\n1.774503e+06\n0.548682\n0.548682\n0.525231\n\n\n1828\n2.349070\n44445.743806\n2023-05-13 00:00:00+00:00\nBURN\n-1.114350e+02\n1.774503e+06\n0.548682\n0.548682\n0.525231\n\n\n\n\n1829 rows × 9 columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "conding",
    "section": "",
    "text": "from conding.dune.tec import TECDashboard\n\ntec = TECDashboard()\n\ntec.market_information.holders_distribution()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrank_number\naddress\nbalance\nperc\ncumulative_perc\n\n\n\n\n0\n1\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.500717e+05\n8.264853e-02\n0.082649\n\n\n1\n2\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.060533e+05\n5.840639e-02\n0.141055\n\n\n2\n3\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n7.383866e+04\n4.066494e-02\n0.181720\n\n\n3\n4\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n6.933751e+04\n3.818603e-02\n0.219906\n\n\n4\n5\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n5.916598e+04\n3.258430e-02\n0.252490\n\n\n...\n...\n...\n...\n...\n...\n\n\n540\n541\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.024000e-15\n5.639443e-22\n1.000000\n\n\n541\n542\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n2.560000e-16\n1.409861e-22\n1.000000\n\n\n542\n543\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n8.000000e-17\n4.405815e-23\n1.000000\n\n\n543\n544\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.600000e-17\n8.811630e-24\n1.000000\n\n\n544\n545\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.000000e-18\n5.507269e-25\n1.000000\n\n\n\n\n545 rows × 5 columns\n\n\n\n\ntec.abc_tributes.tribute_distribution()\n\n\n\n\n\n\n\n\ndate\naction\nsum(tribute)\ntribute_total\n\n\n\n\n0\n2022-04-01T00:00:00Z\nSell\n364.927505\n96097.104858\n\n\n1\n2022-05-01T00:00:00Z\nBuy\n502.690920\n96097.104858\n\n\n2\n2022-05-01T00:00:00Z\nSell\n27525.756009\n96097.104858\n\n\n3\n2022-06-01T00:00:00Z\nBuy\n18.424300\n96097.104858\n\n\n4\n2022-06-01T00:00:00Z\nSell\n9637.008165\n96097.104858\n\n\n5\n2022-07-01T00:00:00Z\nBuy\n46.280000\n96097.104858\n\n\n6\n2022-07-01T00:00:00Z\nSell\n875.231330\n96097.104858\n\n\n7\n2022-08-01T00:00:00Z\nBuy\n84.000440\n96097.104858\n\n\n8\n2022-08-01T00:00:00Z\nSell\n3578.698760\n96097.104858\n\n\n9\n2022-09-01T00:00:00Z\nBuy\n440.034000\n96097.104858\n\n\n10\n2022-09-01T00:00:00Z\nSell\n6524.963118\n96097.104858\n\n\n11\n2022-10-01T00:00:00Z\nBuy\n0.448273\n96097.104858\n\n\n12\n2022-10-01T00:00:00Z\nSell\n7265.726778\n96097.104858\n\n\n13\n2022-11-01T00:00:00Z\nBuy\n42.080000\n96097.104858\n\n\n14\n2022-11-01T00:00:00Z\nSell\n7948.406669\n96097.104858\n\n\n15\n2022-12-01T00:00:00Z\nBuy\n1.260000\n96097.104858\n\n\n16\n2022-12-01T00:00:00Z\nSell\n6767.473366\n96097.104858\n\n\n17\n2023-01-01T00:00:00Z\nBuy\n0.310000\n96097.104858\n\n\n18\n2023-01-01T00:00:00Z\nSell\n3886.310413\n96097.104858\n\n\n19\n2023-02-01T00:00:00Z\nBuy\n0.100000\n96097.104858\n\n\n20\n2023-02-01T00:00:00Z\nSell\n4413.471438\n96097.104858\n\n\n21\n2023-03-01T00:00:00Z\nBuy\n3.100000\n96097.104858\n\n\n22\n2023-03-01T00:00:00Z\nSell\n13877.419531\n96097.104858\n\n\n23\n2023-04-01T00:00:00Z\nBuy\n460.600000\n96097.104858\n\n\n24\n2023-04-01T00:00:00Z\nSell\n1832.383842\n96097.104858"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "conding",
    "section": "",
    "text": "from conding.dune.tec import TECDashboard\n\ntec = TECDashboard()\n\ntec.market_information.holders_distribution()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrank_number\naddress\nbalance\nperc\ncumulative_perc\n\n\n\n\n0\n1\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.500717e+05\n8.264853e-02\n0.082649\n\n\n1\n2\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.060533e+05\n5.840639e-02\n0.141055\n\n\n2\n3\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n7.383866e+04\n4.066494e-02\n0.181720\n\n\n3\n4\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n6.933751e+04\n3.818603e-02\n0.219906\n\n\n4\n5\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n5.916598e+04\n3.258430e-02\n0.252490\n\n\n...\n...\n...\n...\n...\n...\n\n\n540\n541\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.024000e-15\n5.639443e-22\n1.000000\n\n\n541\n542\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n2.560000e-16\n1.409861e-22\n1.000000\n\n\n542\n543\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n8.000000e-17\n4.405815e-23\n1.000000\n\n\n543\n544\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.600000e-17\n8.811630e-24\n1.000000\n\n\n544\n545\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.000000e-18\n5.507269e-25\n1.000000\n\n\n\n\n545 rows × 5 columns\n\n\n\n\ntec.abc_tributes.tribute_distribution()\n\n\n\n\n\n\n\n\ndate\naction\nsum(tribute)\ntribute_total\n\n\n\n\n0\n2022-04-01T00:00:00Z\nSell\n364.927505\n96097.104858\n\n\n1\n2022-05-01T00:00:00Z\nBuy\n502.690920\n96097.104858\n\n\n2\n2022-05-01T00:00:00Z\nSell\n27525.756009\n96097.104858\n\n\n3\n2022-06-01T00:00:00Z\nBuy\n18.424300\n96097.104858\n\n\n4\n2022-06-01T00:00:00Z\nSell\n9637.008165\n96097.104858\n\n\n5\n2022-07-01T00:00:00Z\nBuy\n46.280000\n96097.104858\n\n\n6\n2022-07-01T00:00:00Z\nSell\n875.231330\n96097.104858\n\n\n7\n2022-08-01T00:00:00Z\nBuy\n84.000440\n96097.104858\n\n\n8\n2022-08-01T00:00:00Z\nSell\n3578.698760\n96097.104858\n\n\n9\n2022-09-01T00:00:00Z\nBuy\n440.034000\n96097.104858\n\n\n10\n2022-09-01T00:00:00Z\nSell\n6524.963118\n96097.104858\n\n\n11\n2022-10-01T00:00:00Z\nBuy\n0.448273\n96097.104858\n\n\n12\n2022-10-01T00:00:00Z\nSell\n7265.726778\n96097.104858\n\n\n13\n2022-11-01T00:00:00Z\nBuy\n42.080000\n96097.104858\n\n\n14\n2022-11-01T00:00:00Z\nSell\n7948.406669\n96097.104858\n\n\n15\n2022-12-01T00:00:00Z\nBuy\n1.260000\n96097.104858\n\n\n16\n2022-12-01T00:00:00Z\nSell\n6767.473366\n96097.104858\n\n\n17\n2023-01-01T00:00:00Z\nBuy\n0.310000\n96097.104858\n\n\n18\n2023-01-01T00:00:00Z\nSell\n3886.310413\n96097.104858\n\n\n19\n2023-02-01T00:00:00Z\nBuy\n0.100000\n96097.104858\n\n\n20\n2023-02-01T00:00:00Z\nSell\n4413.471438\n96097.104858\n\n\n21\n2023-03-01T00:00:00Z\nBuy\n3.100000\n96097.104858\n\n\n22\n2023-03-01T00:00:00Z\nSell\n13877.419531\n96097.104858\n\n\n23\n2023-04-01T00:00:00Z\nBuy\n460.600000\n96097.104858\n\n\n24\n2023-04-01T00:00:00Z\nSell\n1832.383842\n96097.104858"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "conding",
    "section": "Installation",
    "text": "Installation\n\nInstalling as a Package\npip install:\npip install conding\nExport your Dune API Key as an environment variable.\nexport DUNE_API_KEY='&lt;Your Key&gt;'\n\n\nLocal Development\nClone the repository\ngit clone git@github.com:bonding-curves/conding.git\ncd conding\nAdd your Dune API Key to the .env file.\nmv .env.template .env\nvi .env\nInstall the requirements with poetry. For instructions on installing poetry see: https://python-poetry.org/docs/\npoetry install --with dev\npoetry shell\n\n\nUsing NBDev\nWhen first running the package, install git hooks and quarto\nnbdev_install_hooks\nnbdev_install_quarto\nRun tests with nbdev\nnbdev_test\nView documentation locally\nnbdev_preview\nExport changes made to notebooks\nnbdev_export\nBuild Documentation\nnbdev_docs\nSee more options\nnbdev_help\nSee https://nbdev.fast.ai/ for more information on Nbdev."
  },
  {
    "objectID": "dune/tec_analysis.html",
    "href": "dune/tec_analysis.html",
    "title": "TEC Dune Analysis",
    "section": "",
    "text": "import hvplot.pandas\nimport numpy as np\nimport pandas as pd\nfrom conding.dune.tec import TECDashboard\n\ntec = TECDashboard()\n\n\n\n\n\n\n\n\n\n\n\n\nHolders Distribution\n\nholders_distribution = tec.market_information.holders_distribution()\n\n\nholders_distribution\n\n\n\n\n\n\n\n\nrank_number\naddress\nbalance\nperc\ncumulative_perc\n\n\n\n\n0\n1\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.500717e+05\n8.369784e-02\n0.083698\n\n\n1\n2\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.060533e+05\n5.914792e-02\n0.142846\n\n\n2\n3\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n7.383866e+04\n4.118122e-02\n0.184027\n\n\n3\n4\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n6.933751e+04\n3.867085e-02\n0.222698\n\n\n4\n5\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n5.916598e+04\n3.299799e-02\n0.255696\n\n\n...\n...\n...\n...\n...\n...\n\n\n535\n536\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n8.192000e-15\n4.568834e-21\n1.000000\n\n\n536\n537\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n2.048000e-15\n1.142208e-21\n1.000000\n\n\n537\n538\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n5.120000e-16\n2.855521e-22\n1.000000\n\n\n538\n539\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n8.000000e-17\n4.461752e-23\n1.000000\n\n\n539\n540\n&lt;a href=\"https://blockscout.com/xdai/mainnet/a...\n1.000000e-18\n5.577190e-25\n1.000000\n\n\n\n\n540 rows × 5 columns\n\n\n\n\nholders_distribution = holders_distribution[holders_distribution['balance'] &gt; 1]\n\n\nholders_distribution.hvplot.line(x='rank_number', y='balance')\n\n\n\n\n\n  \n\n\n\n\n\n\nGini Coefficient\n\ndef gini(y):\n    y = np.asarray(y)\n    gini = abs(y.reshape(len(y),1) - y.reshape(1,len(y))).sum() / (2 * len(y)**2 * y.mean())\n    return gini\n\n\ngini(holders_distribution['balance'])\n\n0.8288929468475528\n\n\n\nholders_distribution[['balance']].describe()\n\n\n\n\n\n\n\n\nbalance\n\n\n\n\ncount\n463.000000\n\n\nmean\n3872.584207\n\n\nstd\n12063.681563\n\n\nmin\n1.000713\n\n\n25%\n78.670027\n\n\n50%\n502.856145\n\n\n75%\n2662.876174\n\n\nmax\n150071.717791\n\n\n\n\n\n\n\n\n\nTEC Price Chart\n\nprice_chart = tec.market_information.price_chart()\nprice_chart['block_date'] = pd.to_datetime(price_chart['block_date'])\nprice_chart = price_chart.replace('&lt;nil&gt;', np.nan).bfill()\nprice_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']] = price_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']].astype(float)\nprice_chart.head()\n\n\n\n\n\n\n\n\nblock_date\navg_mint_price\navg_burn_price\navg_mkt_price\n\n\n\n\n0\n2022-01-25 00:00:00+00:00\n1.956346\n2.221616\n2.305090\n\n\n1\n2022-01-26 00:00:00+00:00\n2.893026\n2.221616\n2.592010\n\n\n2\n2022-01-27 00:00:00+00:00\n2.864334\n2.221616\n2.540351\n\n\n3\n2022-01-28 00:00:00+00:00\n2.826360\n2.249963\n2.477631\n\n\n4\n2022-01-29 00:00:00+00:00\n2.943731\n2.250424\n2.683242\n\n\n\n\n\n\n\n\nprice_chart_view = price_chart.hvplot.line(y=['avg_mint_price', 'avg_burn_price', 'avg_mkt_price'], x='block_date', title=\"TEC Price Chart\")\nprice_chart_view\n\n\n\n\n\n  \n\n\n\n\n\ntec.market_information.holders_and_supply().iloc[:1]\n\ntotal_holders    538.0\nName: 0, dtype: float64\n\n\n\nholders_over_time = tec.market_information.holders_over_time()\nholders_over_time['Date'] = pd.to_datetime(holders_over_time['Date'])\nholders_over_time\n\n\n\n\n\n\n\n\nDate\nHolders\nChanges\n\n\n\n\n0\n2022-01-13 00:00:00+00:00\n4\n0\n\n\n1\n2022-01-14 00:00:00+00:00\n4\n0\n\n\n2\n2022-01-15 00:00:00+00:00\n5\n1\n\n\n3\n2022-01-16 00:00:00+00:00\n5\n0\n\n\n4\n2022-01-17 00:00:00+00:00\n5\n0\n\n\n...\n...\n...\n...\n\n\n349\n2022-12-28 00:00:00+00:00\n529\n-1\n\n\n350\n2022-12-29 00:00:00+00:00\n529\n0\n\n\n351\n2022-12-30 00:00:00+00:00\n529\n0\n\n\n352\n2022-12-31 00:00:00+00:00\n529\n0\n\n\n353\n2023-01-01 00:00:00+00:00\n529\n0\n\n\n\n\n354 rows × 3 columns\n\n\n\n\nholders_over_time.hvplot.line(x='Date', y='Holders', title=\"TEC Holders\")\n\n\n\n\n\n  \n\n\n\n\n\nabc_tributes = tec.abc_tributes.tribute_distribution()\nabc_tributes['date'] = pd.to_datetime(abc_tributes['date'])\nabc_tributes\n\n\n\n\n\n\n\n\ndate\naction\nsum(tribute)\ntribute_total\n\n\n\n\n0\n2022-05-01 00:00:00+00:00\nBuy\n500.410920\n96376.240815\n\n\n1\n2022-05-01 00:00:00+00:00\nSell\n26956.671309\n96376.240815\n\n\n2\n2022-06-01 00:00:00+00:00\nBuy\n18.424300\n96376.240815\n\n\n3\n2022-06-01 00:00:00+00:00\nSell\n9637.008165\n96376.240815\n\n\n4\n2022-07-01 00:00:00+00:00\nBuy\n46.280000\n96376.240815\n\n\n5\n2022-07-01 00:00:00+00:00\nSell\n875.231330\n96376.240815\n\n\n6\n2022-08-01 00:00:00+00:00\nBuy\n84.000440\n96376.240815\n\n\n7\n2022-08-01 00:00:00+00:00\nSell\n3578.698760\n96376.240815\n\n\n8\n2022-09-01 00:00:00+00:00\nBuy\n440.034000\n96376.240815\n\n\n9\n2022-09-01 00:00:00+00:00\nSell\n6524.963118\n96376.240815\n\n\n10\n2022-10-01 00:00:00+00:00\nBuy\n0.448273\n96376.240815\n\n\n11\n2022-10-01 00:00:00+00:00\nSell\n7265.726778\n96376.240815\n\n\n12\n2022-11-01 00:00:00+00:00\nBuy\n42.080000\n96376.240815\n\n\n13\n2022-11-01 00:00:00+00:00\nSell\n7948.406669\n96376.240815\n\n\n14\n2022-12-01 00:00:00+00:00\nBuy\n1.260000\n96376.240815\n\n\n15\n2022-12-01 00:00:00+00:00\nSell\n6767.473366\n96376.240815\n\n\n16\n2023-01-01 00:00:00+00:00\nBuy\n0.310000\n96376.240815\n\n\n17\n2023-01-01 00:00:00+00:00\nSell\n3886.310413\n96376.240815\n\n\n18\n2023-02-01 00:00:00+00:00\nBuy\n0.100000\n96376.240815\n\n\n19\n2023-02-01 00:00:00+00:00\nSell\n4413.471438\n96376.240815\n\n\n20\n2023-03-01 00:00:00+00:00\nBuy\n3.100000\n96376.240815\n\n\n21\n2023-03-01 00:00:00+00:00\nSell\n13877.419531\n96376.240815\n\n\n22\n2023-04-01 00:00:00+00:00\nBuy\n460.600000\n96376.240815\n\n\n23\n2023-04-01 00:00:00+00:00\nSell\n1922.144389\n96376.240815\n\n\n24\n2023-05-01 00:00:00+00:00\nSell\n1125.667616\n96376.240815\n\n\n\n\n\n\n\n\nmonthly_tribute_view = abc_tributes.hvplot.step(x='date', y='sum(tribute)', title='Monthly ABC Tributes', label=\"Monthly\")\nmonthly_tribute_view\n\n\n\n\n\n  \n\n\n\n\n\nabc_tributes['cummulative'] = abc_tributes['sum(tribute)'].cumsum()\n\n\ncummulative_tribute_view = abc_tributes.hvplot.step(x='date', y='cummulative', title='Cummulative ABC Tributes', label=\"Cummulative\")\ncummulative_tribute_view\n\n\n\n\n\n  \n\n\n\n\n\ntribute_view = (monthly_tribute_view * cummulative_tribute_view).opts(title=\"ABC Tributes\")\ntribute_view\n\n\n\n\n\n  \n\n\n\n\n\n\nTEC ETH Comparison\n\ndf = tec.market_information.price_chart()\ndf\n\n\n\n\n\n\n\n\nblock_date\navg_mint_price\navg_burn_price\navg_mkt_price\n\n\n\n\n0\n2022-01-25T00:00:00Z\n1.956345888613234\n2.2216159017515933\n2.3050899888800456\n\n\n1\n2022-01-26T00:00:00Z\n2.893025644547676\n2.2216159017515933\n2.5920101807901506\n\n\n2\n2022-01-27T00:00:00Z\n2.864333966225624\n2.2216159017515933\n2.5403510974065853\n\n\n3\n2022-01-28T00:00:00Z\n2.8263603268647635\n2.24996276540192\n2.4776305971040147\n\n\n4\n2022-01-29T00:00:00Z\n2.9437308337890533\n2.2504243681326854\n2.683241567655875\n\n\n...\n...\n...\n...\n...\n\n\n468\n2023-05-09T00:00:00Z\n0.5622850229364372\n0.5622850229364372\n0.5258280581358534\n\n\n469\n2023-05-10T00:00:00Z\n0.5608069285035435\n0.5608069285035435\n0.5321566407096778\n\n\n470\n2023-05-11T00:00:00Z\n0.5596423808136822\n0.5596423808136822\n0.5216465103908255\n\n\n471\n2023-05-12T00:00:00Z\n0.5540953786399315\n0.5540953786399315\n0.4488854737838069\n\n\n472\n2023-05-13T00:00:00Z\n0.5486815642541326\n0.5486815642541326\n0.5252311803074452\n\n\n\n\n473 rows × 4 columns\n\n\n\n\ntec_price_chart_view = tec.market_information.view_price_chart(normalize=True)\ntec_price_chart_view\n\n\n\n\n\n  \n\n\n\n\n\nimport yfinance as yf\n\neth = yf.Ticker(\"ETH-USD\")\n\neth_history = eth.history(period=\"max\")\n\nstart_date = tec.market_information.price_chart().iloc[0]['block_date']\neth_history = eth_history.loc[start_date:]\n\neth_history = eth_history / eth_history.iloc[0]\n\neth_price_view = eth_history[['Close']].hvplot.line(label='ETH')\neth_price_view\n\n\n\n\n\n  \n\n\n\n\n\nchart = tec_price_chart_view * eth_price_view\nchart.opts(width=1200, height=640)\nchart"
  },
  {
    "objectID": "dune/dune.html",
    "href": "dune/dune.html",
    "title": "Dune Dashboard Base Class",
    "section": "",
    "text": "DuneWrapper\n\n DuneWrapper ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\ndune = DuneWrapper()\n\n\ndune.refresh_into_dataframe(1898885)\n\n\n\n\n\n\n\n\nblock_date\navg_mint_price\navg_burn_price\navg_mkt_price\n\n\n\n\n0\n2022-01-25T00:00:00Z\n1.956345888613234\n&lt;nil&gt;\n2.3050899888800456\n\n\n1\n2022-01-26T00:00:00Z\n2.893025644547676\n&lt;nil&gt;\n2.5920101807901506\n\n\n2\n2022-01-27T00:00:00Z\n2.864333966225624\n2.2216159017515933\n2.5403510974065853\n\n\n3\n2022-01-28T00:00:00Z\n2.8263603268647635\n2.24996276540192\n2.4776305971040147\n\n\n4\n2022-01-29T00:00:00Z\n2.9437308337890533\n&lt;nil&gt;\n2.683241567655875\n\n\n...\n...\n...\n...\n...\n\n\n468\n2023-05-09T00:00:00Z\n0.5622850229364372\n0.5622850229364372\n0.5258280581358534\n\n\n469\n2023-05-10T00:00:00Z\n0.5608069285035435\n0.5608069285035435\n0.5321566407096778\n\n\n470\n2023-05-11T00:00:00Z\n0.5596423808136822\n0.5596423808136822\n0.5216465103908255\n\n\n471\n2023-05-12T00:00:00Z\n0.5540953786399315\n0.5540953786399315\n0.4488854737838069\n\n\n472\n2023-05-13T00:00:00Z\n0.5486815642541326\n0.5486815642541326\n0.5252311803074452\n\n\n\n\n473 rows × 4 columns\n\n\n\n\ndune.refresh_into_dataframe(1752257, update_cache=True)\n\n2023-06-26 20:21:23,589 INFO dune_client.base_client waiting for query execution 01H3XDXGJTAT41Y2QMW22KBFR8 to complete: ExecutionState.EXECUTING\n\n\n\n\n\n\n\n\n\ntotal_pool_value\nreserve_pool_value\ncommon_pool_value\n\n\n\n\n0\n1.026493e+06\n418519.660202\n607972.869308\n\n\n\n\n\n\n\n\ndune.refresh_into_dataframe(1752257, update_cache=True, params=[{\n    \"type\": \"date\",\n    \"name\": \"2. End Date\",\n    \"value\": \"2055-05-04 00:00:00\",\n}])\n\n2023-06-26 20:26:14,303 INFO dune_client.base_client waiting for query execution 01H3XE6CFAG1NKGAYQG00WA86P to complete: ExecutionState.EXECUTING\n\n\n\n\n\n\n\n\n\ntotal_pool_value\nreserve_pool_value\ncommon_pool_value\n\n\n\n\n0\n598970.662378\n204683.097109\n394287.56527"
  },
  {
    "objectID": "samm/2-uniswap-analysis.html",
    "href": "samm/2-uniswap-analysis.html",
    "title": "Experiment #0: Heatmap of y_out with constant x_in.",
    "section": "",
    "text": "import panel as pn\nimport numpy as np\nimport pandas as pd\nimport holoviews as hv\nfrom conding.samm.uniswap import Uniswap\npn.extension()\nhv.extension('bokeh')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\n\npn.config.throttled = False\n\nuniswap = Uniswap()\nuniswap.view()\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\npn.config.throttled = True\nuniswap.reset()\nnum = 5\nxs = np.linspace(*uniswap.param['x'].softbounds, num=num)\nys = np.linspace(*uniswap.param['y'].softbounds, num=num)\nX, Y = np.meshgrid(xs, ys)\nphase_space = pd.DataFrame(np.stack([X.ravel(), Y.ravel()]).T, columns=['x','y'])\n\n\nphase_space['y_out'] = phase_space.apply(lambda row: uniswap.y_out if uniswap.param.update(**row) is None else None, axis=1)\n\n\nphase_space\n\n\n\n\n\n\n\n\nx\ny\ny_out\n\n\n\n\n0\n1.00\n1.00\n0.500000\n\n\n1\n25.75\n1.00\n0.037383\n\n\n2\n50.50\n1.00\n0.019417\n\n\n3\n75.25\n1.00\n0.013115\n\n\n4\n100.00\n1.00\n0.009901\n\n\n5\n1.00\n25.75\n12.875000\n\n\n6\n25.75\n25.75\n0.962617\n\n\n7\n50.50\n25.75\n0.500000\n\n\n8\n75.25\n25.75\n0.337705\n\n\n9\n100.00\n25.75\n0.254950\n\n\n10\n1.00\n50.50\n25.250000\n\n\n11\n25.75\n50.50\n1.887850\n\n\n12\n50.50\n50.50\n0.980583\n\n\n13\n75.25\n50.50\n0.662295\n\n\n14\n100.00\n50.50\n0.500000\n\n\n15\n1.00\n75.25\n37.625000\n\n\n16\n25.75\n75.25\n2.813084\n\n\n17\n50.50\n75.25\n1.461165\n\n\n18\n75.25\n75.25\n0.986885\n\n\n19\n100.00\n75.25\n0.745050\n\n\n20\n1.00\n100.00\n50.000000\n\n\n21\n25.75\n100.00\n3.738318\n\n\n22\n50.50\n100.00\n1.941748\n\n\n23\n75.25\n100.00\n1.311475\n\n\n24\n100.00\n100.00\n0.990099\n\n\n\n\n\n\n\n\nhv.HeatMap(phase_space, kdims=['x','y'], vdims=['y_out']).opts(height=600, width=600, title='y_out Heatmap', colorbar=True)\n\n\n\n\n\n  \n\n\n\n\n\nExperiment #1: Observing mechanism data according to Liquidity of the pair (L)\n\npn.config.throttled = True\nuniswap.reset()\ndrop_columns=['_updating', 'name', 'swap', 'switch_xy']\nexperiment1_columns = ['L', 'execution_price_x_y', 'price_x_y', 'x', 'x_in', 'y', 'y_out']\n\nliquidity_range = np.linspace(*uniswap.param['L'].softbounds, num=50)\n\ndata = []\nfor L in liquidity_range:\n    uniswap.L = L\n    data.append(uniswap.param.values())\n    \ndf = pd.DataFrame(data).drop(drop_columns, axis=1)\ndf = df[experiment1_columns]\n\n\ndf.head()\n\n\n\n\n\n\n\n\nL\nexecution_price_x_y\nprice_x_y\nx\nx_in\ny\ny_out\n\n\n\n\n0\n1.000000\n1.333333\n0.0\n0.500000\n1\n2.000000\n1.333333\n\n\n1\n3.020408\n2.406504\n0.0\n1.510204\n1\n6.040816\n2.406504\n\n\n2\n5.040816\n2.863768\n0.0\n2.520408\n1\n10.081633\n2.863768\n\n\n3\n7.061224\n3.117117\n0.0\n3.530612\n1\n14.122449\n3.117117\n\n\n4\n9.081633\n3.278085\n0.0\n4.540816\n1\n18.163265\n3.278085\n\n\n\n\n\n\n\n\ndf.hvplot.line(y=['execution_price_x_y'], x='L')\n\n\n\n\n\n  \n\n\n\n\n\n\nExperiment #2: Calculating Slippage [WIP] def _reset(self):\n    for param in self.param:\n        if param not in [\"name\"]:\n            setattr(self, param, self.param[param].default)\nChatGPT provided the following formulas for slippage:\nPercentage slippage = (Execution price - Expected price) / Expected price * 100%\n\nBasis point slippage = (Execution price - Expected price) / Expected price * 10,000 basis points\n\nDollar slippage = (Execution price - Expected price) * Quantity\nI asked the chat bot to proved python functions for the above, and I received the following:\n\ndef percentage_slippage(execution_price, expected_price):\n    return ((execution_price - expected_price) / expected_price) * 100\n\n\ndef basis_point_slippage(execution_price, expected_price):\n    return ((execution_price - expected_price) / expected_price) * 10000\n\n\ndef dollar_slippage(execution_price, expected_price, quantity):\n    return (execution_price - expected_price) * quantity\n\nSimple slippage calculation inspired by the above.\n\n# Slippage\ndf['price_slippage_x_y'] = np.abs(df['price_x_y'] - df['execution_price_x_y'])\ndf['percentage_slippage_x_y'] = (df['price_slippage_x_y'] / df['price_x_y']) * 100\ndf['absolute_slippage_x_y'] = df['price_slippage_x_y'] * df['x_in']\n\n\ndf.head()\n\n\n\n\n\n\n\n\nL\nexecution_price_x_y\nprice_x_y\nx\nx_in\ny\ny_out\nprice_slippage_x_y\npercentage_slippage_x_y\nabsolute_slippage_x_y\n\n\n\n\n0\n1.000000\n1.333333\n0.0\n0.500000\n1\n2.000000\n1.333333\n1.333333\ninf\n1.333333\n\n\n1\n3.020408\n2.406504\n0.0\n1.510204\n1\n6.040816\n2.406504\n2.406504\ninf\n2.406504\n\n\n2\n5.040816\n2.863768\n0.0\n2.520408\n1\n10.081633\n2.863768\n2.863768\ninf\n2.863768\n\n\n3\n7.061224\n3.117117\n0.0\n3.530612\n1\n14.122449\n3.117117\n3.117117\ninf\n3.117117\n\n\n4\n9.081633\n3.278085\n0.0\n4.540816\n1\n18.163265\n3.278085\n3.278085\ninf\n3.278085\n\n\n\n\n\n\n\n\n2.a Defining Slippage\n\n# df['percentage_slippage'] = df[['execution_price_x_y', 'price_x_y']].apply(lambda row: percentage_slippage(*row), axis=1)\n# df['basis_point_slippage'] = df[['execution_price_x_y', 'price_x_y']].apply(lambda row: basis_point_slippage(*row), axis=1)\n# df['dollar_slippage'] = df[['execution_price_x_y', 'price_x_y', 'x_in']].apply(lambda row: dollar_slippage(*row), axis=1)\n\n\n\n2.b Calculating Slippage in the Context of a Bonding Curve\nThe following code is generated by chatGPT to calculate slippage in the context of a uniswap constant product market.\n\n# Example code for computing expected price, execution price, and quantity for a Uniswap pair\n\nimport math\n\n# Define pair properties and transaction details\nreserve_1 = 1000.0\nreserve_2 = 2000.0\namount_1 = 100.0\nfee = 0.003\n\n# Calculate expected price based on reserves and transaction details\nexpected_price = reserve_2 / reserve_1\nexpected_price *= 1 - fee if amount_1 &gt; 0 else 1 + fee\nexpected_price_new = (reserve_2 + amount_1) / (reserve_1 - amount_1)\nexpected_price_new *= 1 - fee if amount_1 &gt; 0 else 1 + fee\nexpected_price = math.sqrt(expected_price * expected_price_new)\n\n# Calculate execution price based on reserves and transaction details\nexecution_price = reserve_2 / (reserve_1 - amount_1) if amount_1 &gt; 0 else (reserve_2 + amount_1) / reserve_1\n\n# Calculate quantity based on reserves and transaction details\nquantity = amount_1 / (1 + fee) if amount_1 &gt; 0 else (reserve_1 - reserve_1 / (reserve_2 - amount_1)) / (1 + fee)\n\n# Print results\nprint(f\"Expected price: {expected_price}\")\nprint(f\"Execution price: {execution_price}\")\nprint(f\"Quantity: {quantity}\")\n\nExpected price: 2.153766158770879\nExecution price: 2.2222222222222223\nQuantity: 99.70089730807578\n\n\n\n\n3.c Mapping Terms\nLet’s map our terms to the above terms as an excercise to see what data we have.\n\ndf['reserve_1'] = df['x']\ndf['reserve_2'] = df['y']\ndf['amount_1'] = df['x_in']\ndf['fee'] = 0.003\n\nTo process the above data, let’s practice on toy data first.\n\n\n3.d Vectorizing ChatGPT’s Formula for Slippage on Toy Data\n\ntoy_df = pd.DataFrame([\n    dict(\n        reserve_1 = 1000.0,\n        reserve_2 = 2000.0,\n        amount_1 = 100.0,\n        fee = 0.003,\n    )])\n\n3.d i) By processing a dataframe.\n\ndef vectorized_slippage_formula(df):\n    \n    # Calculate expected price based on reserves and transaction details\n\n    # Fee factor\n    df['fee_factor'] = np.select(condlist=df['amount_1'] &gt; 0, choicelist=1 - df['fee'], default=1 + df['fee'])\n    \n    # First expected price\n    df['expected_price_first'] = (df['reserve_2'] / df['reserve_1']) \n    df['expected_price_first_with_fee'] = df['expected_price_first'] * df['fee_factor']\n    \n    # New expected price\n    df['expected_price_new'] = ((df['reserve_2'] + df['amount_1']) / (df['reserve_1'] - df['amount_1'])) \n    df['expected_price_new_with_fee'] = df['expected_price_new'] * df['fee_factor']\n    \n    # Final expected price\n    df['expected_price_final'] = np.sqrt(df['expected_price_first'] * df['expected_price_new'])\n    df['expected_price_final_with_fee'] = np.sqrt(df['expected_price_first_with_fee'] * df['expected_price_new_with_fee'])\n\n    # Calculate execution price based on reserves and transaction details\n    df['execution_price'] = np.select(\n        condlist=df['amount_1'] &gt; 0, \n        choicelist=df['reserve_2'] / (df['reserve_1'] - df['amount_1']), \n        default=(df['reserve_2'] + df['amount_1']) / df['reserve_1'],\n    )\n    \n    # Calculate quantity based on reserves and transaction details\n    df['quantity'] = np.select(\n        condlist=df['amount_1'] &gt; 0, \n        choicelist=df['amount_1'] / (1 + df['fee']), \n        default=(df['reserve_1'] - df['reserve_1'] / (df['reserve_2'] - df['amount_1'])) / (1 + df['fee']),\n    )\n\n    return df\n\nvectorized_slippage_formula(toy_df)\n\n\n\n\n\n\n\n\nreserve_1\nreserve_2\namount_1\nfee\nfee_factor\nexpected_price_first\nexpected_price_first_with_fee\nexpected_price_new\nexpected_price_new_with_fee\nexpected_price_final\nexpected_price_final_with_fee\nexecution_price\nquantity\n\n\n\n\n0\n1000.0\n2000.0\n100.0\n0.003\n0.997\n2.0\n1.994\n2.333333\n2.326333\n2.160247\n2.153766\n2.222222\n99.700897\n\n\n\n\n\n\n\n3.d ii) By vectorizing functions.\n\n# Example code for computing expected price, execution price, and quantity for a Uniswap pair\n\ntransaction_example = dict(\n    reserve_1 = 1000.0,\n    reserve_2 = 2000.0,\n    amount_1 = 100.0,\n    fee = 0.003,\n)\n\n# Define pair properties and transaction details\ndef expected_price(**transaction):\n    # Calculate expected price based on reserves and transaction details\n    expected_price = reserve_2 / reserve_1\n    expected_price *= 1 - fee if amount_1 &gt; 0 else 1 + fee\n    expected_price_new = (reserve_2 + amount_1) / (reserve_1 - amount_1)\n    expected_price_new *= 1 - fee if amount_1 &gt; 0 else 1 + fee\n    expected_price = math.sqrt(expected_price * expected_price_new)\n    print(transaction)\n    print(expected_price)\n    return expected_price\n\ndef execution_price(**transaction):\n    # Calculate execution price based on reserves and transaction details\n    execution_price = reserve_2 / (reserve_1 - amount_1) if amount_1 &gt; 0 else (reserve_2 + amount_1) / reserve_1\n    return execution_price\n\ndef quantity(**transaction):\n    # Calculate quantity based on reserves and transaction details\n    quantity = amount_1 / (1 + fee) if amount_1 &gt; 0 else (reserve_1 - reserve_1 / (reserve_2 - amount_1)) / (1 + fee)\n    return quantity\n\n# Print results\nprint(f\"Expected price: {expected_price(**transaction_example)}\")\nprint(f\"Execution price: {execution_price(**transaction_example)}\")\nprint(f\"Quantity: {quantity(**transaction_example)}\")\n\n{'reserve_1': 1000.0, 'reserve_2': 2000.0, 'amount_1': 100.0, 'fee': 0.003}\n2.153766158770879\nExpected price: 2.153766158770879\nExecution price: 2.2222222222222223\nQuantity: 99.70089730807578\n\n\n\ntoy_df['expected_price'] = toy_df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: expected_price(**row), axis=1)\ntoy_df['execution_price'] = toy_df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: execution_price(**row), axis=1)\ntoy_df['quantity'] = toy_df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: quantity(**row), axis=1)\n\n{'reserve_1': 1000.0, 'reserve_2': 2000.0, 'amount_1': 100.0, 'fee': 0.003}\n2.153766158770879\n\n\n\ntoy_df\n\n\n\n\n\n\n\n\nreserve_1\nreserve_2\namount_1\nfee\nfee_factor\nexpected_price_first\nexpected_price_first_with_fee\nexpected_price_new\nexpected_price_new_with_fee\nexpected_price_final\nexpected_price_final_with_fee\nexecution_price\nquantity\nexpected_price\n\n\n\n\n0\n1000.0\n2000.0\n100.0\n0.003\n0.997\n2.0\n1.994\n2.333333\n2.326333\n2.160247\n2.153766\n2.222222\n99.700897\n2.153766\n\n\n\n\n\n\n\n\n\n3.e Applying functions to our mapped data.\n\n# vectorized_slippage_formula(df).bfill().rename({'expected_price_final_with_fee': 'expected_price'},axis=1).drop(['expected_price_first', 'expected_price_first_with_fee', 'expected_price_new', 'expected_price_new_with_fee', 'expected_price_with_fee', 'expected_price_final'], axis=1)\n\n\nexpected_price(**{'reserve_1': 0.5, 'reserve_2': 2.0, 'amount_1': 1.0, 'fee': 0.003})\n\n{'reserve_1': 0.5, 'reserve_2': 2.0, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n\n\n2.153766158770879\n\n\n\nexpected_price(**{'reserve_1': 1.510204081632653, 'reserve_2': 6.040816326530612, 'amount_1': 1.0, 'fee': 0.003})\n\n{'reserve_1': 1.510204081632653, 'reserve_2': 6.040816326530612, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n\n\n2.153766158770879\n\n\n\ndf['expected_price'] = df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: expected_price(**row), axis=1)\ndf['execution_price'] = df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: execution_price(**row), axis=1)\ndf['quantity'] = df[['reserve_1', 'reserve_2', 'amount_1', 'fee']].apply(lambda row: quantity(**row), axis=1)\n\n{'reserve_1': 0.5, 'reserve_2': 2.0, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 1.510204081632653, 'reserve_2': 6.040816326530612, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 2.520408163265306, 'reserve_2': 10.081632653061224, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 3.530612244897959, 'reserve_2': 14.122448979591836, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 4.540816326530612, 'reserve_2': 18.163265306122447, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 5.551020408163264, 'reserve_2': 22.204081632653057, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 6.561224489795918, 'reserve_2': 26.24489795918367, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 7.571428571428571, 'reserve_2': 30.285714285714285, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 8.581632653061224, 'reserve_2': 34.326530612244895, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 9.591836734693876, 'reserve_2': 38.367346938775505, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 10.602040816326529, 'reserve_2': 42.408163265306115, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 11.612244897959183, 'reserve_2': 46.44897959183673, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 12.622448979591836, 'reserve_2': 50.48979591836734, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 13.632653061224488, 'reserve_2': 54.53061224489795, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 14.642857142857142, 'reserve_2': 58.57142857142857, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 15.653061224489795, 'reserve_2': 62.61224489795918, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 16.663265306122447, 'reserve_2': 66.65306122448979, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 17.6734693877551, 'reserve_2': 70.6938775510204, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 18.683673469387752, 'reserve_2': 74.73469387755101, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 19.693877551020407, 'reserve_2': 78.77551020408163, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 20.704081632653057, 'reserve_2': 82.81632653061223, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 21.71428571428571, 'reserve_2': 86.85714285714285, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 22.724489795918366, 'reserve_2': 90.89795918367346, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 23.734693877551017, 'reserve_2': 94.93877551020407, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 24.74489795918367, 'reserve_2': 98.97959183673468, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 25.755102040816325, 'reserve_2': 103.0204081632653, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 26.765306122448976, 'reserve_2': 107.0612244897959, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 27.77551020408163, 'reserve_2': 111.10204081632652, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 28.785714285714285, 'reserve_2': 115.14285714285714, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 29.795918367346935, 'reserve_2': 119.18367346938774, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 30.80612244897959, 'reserve_2': 123.22448979591836, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 31.81632653061224, 'reserve_2': 127.26530612244896, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 32.826530612244895, 'reserve_2': 131.30612244897958, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 33.836734693877546, 'reserve_2': 135.34693877551018, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 34.8469387755102, 'reserve_2': 139.3877551020408, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 35.857142857142854, 'reserve_2': 143.42857142857142, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 36.867346938775505, 'reserve_2': 147.46938775510202, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 37.87755102040816, 'reserve_2': 151.51020408163265, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 38.88775510204081, 'reserve_2': 155.55102040816325, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 39.897959183673464, 'reserve_2': 159.59183673469386, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 40.908163265306115, 'reserve_2': 163.63265306122446, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 41.91836734693877, 'reserve_2': 167.6734693877551, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 42.92857142857142, 'reserve_2': 171.7142857142857, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 43.938775510204074, 'reserve_2': 175.7551020408163, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 44.94897959183673, 'reserve_2': 179.79591836734693, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 45.95918367346938, 'reserve_2': 183.83673469387753, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 46.969387755102034, 'reserve_2': 187.87755102040813, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 47.97959183673469, 'reserve_2': 191.91836734693877, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 48.98979591836734, 'reserve_2': 195.95918367346937, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879\n{'reserve_1': 50.0, 'reserve_2': 200.0, 'amount_1': 1.0, 'fee': 0.003}\n2.153766158770879"
  },
  {
    "objectID": "samm/3-curve-stableswap-curvesim.html",
    "href": "samm/3-curve-stableswap-curvesim.html",
    "title": "conding",
    "section": "",
    "text": "https://classic.curve.fi/files/stableswap-paper.pdf\n\n\nUniswap with Leverage\nFiat Savings Account for Liquidity Providers\n100X lower slippage than uniswap on stablecoins\n\n\nint(0.004 * 10**10)\n\n40000000\n\n\n\nint(0.5 * 10**10)\n\n5000000000\n\n\n\nfrom gmpy2 import mpz\nimport param as pm\n\n\nclass CurvePool(pm.Parameterized):\n    A = pm.Integer(doc=\"Amplification Coefficient.\")\n    _D = pm.Integer(doc=\"Virtual total balance or pool coin balances in native token units.\")\n    n = pm.Integer(doc=\"Number of coins.\")\n    rates = pm.List(item_type=int, doc=\"Precision and rate adjustments.\")\n    tokens = pm.Integer(doc=\"LP token supply.\")\n    fee = pm.Integer(40000000, doc=\"Fee with 10**10 precision.\")\n    fee_mul = pm.Integer(doc=\"Fee multiplier for dynamic fee pools.\")\n    admin_fee = pm.Integer(5000000000, doc=\"Percentage of fee with 10**10 precision.\")\n    balances = pm.List(item_type=int)\n    \n    \n    def __init__(self, **params):\n        super().__init__(**params)\n        \n        self.balances = [self._D // n * 10**18 // _p for _p in self.rates]\n        self.tokens = self.tokens or self.D()\n        self.r = False\n        self.n_total = self.n\n        self.admin_balances = [0] * self.n\n        \n        \n    def _xp(self):\n        return self._xp_mem(self.rates, self.balances)\n    \n    def _xp_mem(self, rates, balances):\n        return [x * p // 10**18 for x, p in zip(balances, rates)]\n    \n    def D(self, xp=None):\n        xp = xp or self._xp()\n        return self.get_D(xp, self.A)\n    \n    def get_D(self, xp, A):\n        Dprev = 0\n        S = sum(xp)\n        D = S\n        n = self.n\n        Ann = A * n\n        D = mpz(D)\n        Ann = mpz(Ann)\n        while abs(D - Dprev) &gt; 1:\n            D_P = D\n            for x in xp:\n                D_P = D_P * D // (n * x)\n            Dprev = D\n            D = (Ann * S + D_P * n) * D // ((Ann - 1) * D + (n + 1) * D_P)\n\n        D = int(D)\n        return D\n    \n    def get_D_mem(self, balances, A):\n        xp = [x * p // 10**18 for x, p in zip(balances, self.rates)]\n        return self.get_D(xp, A)\n    \n    def get_y(self, i, j, x, xp):\n        xx = xp[:]\n        D = self.D(xx)\n        D = mpz(D)\n        xx[i] = x  # x is quantity of underlying asset brought to 1e18 precision\n        n = self.n\n        xx = [xx[k] for k in range(n) if k != j]\n        Ann = self.A * n\n        c = D\n        for y in xx:\n            c = c * D // (y * n)\n        c = c * D // (n * Ann)\n        b = sum(xx) + D // Ann - D\n        y_prev = 0\n        y = D\n        while abs(y - y_prev) &gt; 1:\n            y_prev = y\n            y = (y**2 + c) // (2 * y + b)\n        y = int(y)\n        return y\n    \n    def get_y_D(self, A, i, xp, D):\n        D = mpz(D)\n        n = self.n\n        xx = [xp[k] for k in range(n) if k != i]\n        S = sum(xx)\n        Ann = A * n\n        c = D\n        for y in xx:\n            c = c * D // (y * n)\n        c = c * D // (n * Ann)\n        b = S + D // Ann\n        y_prev = 0\n        y = D\n        while abs(y - y_prev) &gt; 1:\n            y_prev = y\n            y = (y**2 + c) // (2 * y + b - D)\n        y = int(y)\n        return y\n    \n    def exchange(self, i, j, dx):\n        xp = self._xp()\n        x = xp[i] + dx * self.rates[i] // 10**18\n        y = self.get_y(i, j, x, xp)\n        dy = xp[j] - y - 1\n\n        if self.fee_mul is None:\n            fee = dy * self.fee // 10**10\n        else:\n            fee = dy * self.dynamic_fee((xp[i] + x) // 2, (xp[j] + y) // 2) // 10**10\n\n        admin_fee = fee * self.admin_fee // 10**10\n\n        # Convert all to real units\n        rate = self.rates[j]\n        dy = (dy - fee) * 10**18 // rate\n        fee = fee * 10**18 // rate\n        admin_fee = admin_fee * 10**18 // rate\n        assert dy &gt;= 0\n\n        self.balances[i] += dx\n        self.balances[j] -= dy + admin_fee\n        self.admin_balances[j] += admin_fee\n        return dy, fee\n    \n    def calc_withdraw_one_coin(self, token_amount, i, use_fee=True):\n        A = self.A\n        xp = self._xp()\n        D0 = self.D()\n        D1 = D0 - token_amount * D0 // self.tokens\n\n        new_y = self.get_y_D(A, i, xp, D1)\n        dy_before_fee = (xp[i] - new_y) * 10**18 // self.rates[i]\n\n        xp_reduced = xp\n        if self.fee and use_fee:\n            n_coins = self.n\n            _fee = self.fee * n_coins // (4 * (n_coins - 1))\n\n            for j in range(n_coins):\n                dx_expected = 0\n                if j == i:\n                    dx_expected = xp[j] * D1 // D0 - new_y\n                else:\n                    dx_expected = xp[j] - xp[j] * D1 // D0\n                xp_reduced[j] -= _fee * dx_expected // 10**10\n\n        dy = xp[i] - self.get_y_D(A, i, xp_reduced, D1)\n        dy = (dy - 1) * 10**18 // self.rates[i]\n\n        if use_fee:\n            dy_fee = dy_before_fee - dy\n            return dy, dy_fee\n\n        return dy\n    \n    def add_liquidity(self, amounts):\n        mint_amount, fees = self.calc_token_amount(amounts, use_fee=True)\n        self.tokens += mint_amount\n\n        balances = self.balances\n        afee = self.admin_fee\n        admin_fees = [f * afee // 10**10 for f in fees]\n        new_balances = [\n            bal + amt - fee for bal, amt, fee in zip(balances, amounts, admin_fees)\n        ]\n        self.balances = new_balances\n        self.admin_balances = [t + a for t, a in zip(self.admin_balances, admin_fees)]\n\n        return mint_amount\n    \n    def remove_liquidity_one_coin(self, token_amount, i):\n        dy, dy_fee = self.calc_withdraw_one_coin(token_amount, i, use_fee=True)\n        admin_fee = dy_fee * self.admin_fee // 10**10\n        self.balances[i] -= dy + admin_fee\n        self.admin_balances[i] += admin_fee\n        self.tokens -= token_amount\n        return dy, dy_fee\n    \n    def calc_token_amount(self, amounts, use_fee=False):\n        A = self.A\n        old_balances = self.balances\n        D0 = self.get_D_mem(old_balances, A)\n\n        new_balances = self.balances[:]\n        for i in range(self.n):\n            new_balances[i] += amounts[i]\n        D1 = self.get_D_mem(new_balances, A)\n\n        mint_balances = new_balances[:]\n\n        if use_fee:\n            _fee = self.fee * self.n // (4 * (self.n - 1))\n\n            fees = [0] * self.n\n            for i in range(self.n):\n                ideal_balance = D1 * old_balances[i] // D0\n                difference = abs(ideal_balance - new_balances[i])\n                fees[i] = _fee * difference // 10**10\n                mint_balances[i] -= fees[i]\n\n        D2 = self.get_D_mem(mint_balances, A)\n\n        mint_amount = self.tokens * (D2 - D0) // D0\n\n        if use_fee:\n            return mint_amount, fees\n\n        return mint_amount\n    \n    def get_virtual_price(self):\n        return self.D() * 10**18 // self.tokens\n    \n    def dynamic_fee(self, xpi, xpj):\n        xps2 = xpi + xpj\n        xps2 *= xps2  # Doing just ** 2 can overflow apparently\n        return (self.fee_mul * self.fee) // (\n            (self.fee_mul - 10**10) * 4 * xpi * xpj // xps2 + 10**10\n        )\n    \n    def dydxfee(self, i, j):\n        return self.dydx(i, j, use_fee=True)\n    \n    def dydx(self, i, j, use_fee=False):\n        xp = self._xp()\n        return self._dydx(i, j, xp, use_fee)\n    \n    def _dydx(self, i, j, xp, use_fee):\n        xi = xp[i]\n        xj = xp[j]\n        n = self.n\n        A = self.A\n        D = self.D(xp)\n        D_pow = mpz(D) ** (n + 1)\n        x_prod = prod(xp)\n        A_pow = A * n ** (n + 1)\n        dydx = (xj * (xi * A_pow * x_prod + D_pow)) / (\n            xi * (xj * A_pow * x_prod + D_pow)\n        )\n\n        if use_fee:\n            if self.fee_mul is None:\n                fee_factor = self.fee / 10**10\n            else:\n                fee_factor = self.dynamic_fee(xi, xj) / 10**10\n        else:\n            fee_factor = 0\n\n        dydx *= 1 - fee_factor\n\n        return float(dydx)\n\n\ncp = CurvePool()\n\n\ncp.D()\n\n0\n\n\n\nmpz?\n\n\nInit signature: mpz(self, /, *args, **kwargs)\nDocstring:     \nmpz() -&gt; mpz(0)\n     If no argument is given, return mpz(0).\nmpz(n) -&gt; mpz\n     Return an 'mpz' object with a numeric value 'n' (truncating n\n     to its integer part if it's a Fraction, 'mpq', float or 'mpfr').\nmpz(s[, base=0]):\n     Return an 'mpz' object from a string 's' made of digits in the\n     given base.  If base=0, binary, octal, or hex Python strings\n     are recognized by leading 0b, 0o, or 0x characters, otherwise\n     the string is assumed to be decimal. Values for base can range\n     between 2 and 62.\nType:           type\nSubclasses:     \n\n\n\n\npm.List?\n\n\n\nInit signature:\npm.List(\n    default=[],\n    class_=None,\n    item_type=None,\n    instantiate=True,\n    bounds=(0, None),\n    **params,\n)\nDocstring:     \nParameter whose value is a list of objects, usually of a specified type.\nThe bounds allow a minimum and/or maximum length of\nlist to be enforced.  If the item_type is non-None, all\nitems in the list are checked to be of that type.\n`class_` is accepted as an alias for `item_type`, but is\ndeprecated due to conflict with how the `class_` slot is\nused in Selector classes.\nInit docstring:\nInitialize a new Parameter object and store the supplied attributes:\ndefault: the owning class's value for the attribute represented\nby this Parameter, which can be overridden in an instance.\ndoc: docstring explaining what this parameter represents.\nlabel: optional text label to be used when this Parameter is\nshown in a listing. If no label is supplied, the attribute name\nfor this parameter in the owning Parameterized object is used.\nprecedence: a numeric value, usually in the range 0.0 to 1.0,\nwhich allows the order of Parameters in a class to be defined in\na listing or e.g. in GUI menus. A negative precedence indicates\na parameter that should be hidden in such listings.\ninstantiate: controls whether the value of this Parameter will\nbe deepcopied when a Parameterized object is instantiated (if\nTrue), or if the single default value will be shared by all\nParameterized instances (if False). For an immutable Parameter\nvalue, it is best to leave instantiate at the default of\nFalse, so that a user can choose to change the value at the\nParameterized instance level (affecting only that instance) or\nat the Parameterized class or superclass level (affecting all\nexisting and future instances of that class or superclass). For\na mutable Parameter value, the default of False is also appropriate\nif you want all instances to share the same value state, e.g. if\nthey are each simply referring to a single global object like\na singleton. If instead each Parameterized should have its own\nindependently mutable value, instantiate should be set to\nTrue, but note that there is then no simple way to change the\nvalue of this Parameter at the class or superclass level,\nbecause each instance, once created, will then have an\nindependently instantiated value.\nconstant: if true, the Parameter value can be changed only at\nthe class level or in a Parameterized constructor call. The\nvalue is otherwise constant on the Parameterized instance,\nonce it has been constructed.\nreadonly: if true, the Parameter value cannot ordinarily be\nchanged by setting the attribute at the class or instance\nlevels at all. The value can still be changed in code by\ntemporarily overriding the value of this slot and then\nrestoring it, which is useful for reporting values that the\n_user_ should never change but which do change during code\nexecution.\npickle_default_value: whether the default value should be\npickled. Usually, you would want the default value to be pickled,\nbut there are rare cases where that would not be the case (e.g.\nfor file search paths that are specific to a certain system).\nper_instance: whether a separate Parameter instance will be\ncreated for every Parameterized instance. True by default.\nIf False, all instances of a Parameterized class will share\nthe same Parameter object, including all validation\nattributes (bounds, etc.). See also instantiate, which is\nconceptually similar but affects the Parameter value rather\nthan the Parameter object.\nallow_None: if True, None is accepted as a valid value for\nthis Parameter, in addition to any other values that are\nallowed. If the default value is defined as None, allow_None\nis set to True automatically.\ndefault, doc, and precedence all default to None, which allows\ninheritance of Parameter slots (attributes) from the owning-class'\nclass hierarchy (see ParameterizedMetaclass).\nFile:           ~/.cache/pypoetry/virtualenvs/bonding-curve-models-DkitZayp-py3.10/lib/python3.10/site-packages/param/__init__.py\nType:           ParameterMetaclass\nSubclasses:     HookList"
  },
  {
    "objectID": "samm/0-uniswap-math.html",
    "href": "samm/0-uniswap-math.html",
    "title": "conding",
    "section": "",
    "text": "Python Implementation of: https://www.desmos.com/calculator/nw4zrqrftx\n\n\nimport param as pm\nimport panel as pn\nimport pandas as pd\nimport numpy as np\nimport hvplot.pandas\nimport holoviews as hv\nimport math\n# pn.config.throttled = True\n# pn.extension()\n\n\n\n\n\n\n\n\n\n\n\n\nclass Uniswap(pm.Parameterized):\n    L = pm.Number(73.5, bounds=(0.05, 400), step=0.1)\n    k = pm.Number(precedence=-1)\n    \n    x_start = pm.Number(precedence=-1)\n    x_end = pm.Number(167, bounds=(0.05,302.7))\n    x_low = pm.Number(precedence=-1)\n    x_high = pm.Number(precedence=-1)\n    \n    y_start = pm.Number(174.3, bounds=(0,226))\n    y_end = pm.Number(precedence=-1)\n    y_low = pm.Number(precedence=-1)\n    y_high = pm.Number(precedence=-1)\n    \n    xmax = pm.Number(400, precedence=-1)\n    ymax = pm.Number(400, precedence=-1)\n    \n    def __init__(self, **params):\n        super().__init__(**params)\n        self.update()\n    \n    def yx(self, x):\n        return self.L**2 / x\n    \n    def xy(self, y):\n        return self.L**2 / y\n    \n    def p(self, x):\n        return self.L**2 / x**2\n    \n    def truncate(self, x):\n        return math.floor(x * 1000) / 1000\n    \n    @pn.depends('L', 'x_end', 'y_start', watch=True)\n    def update(self):\n        self.k = self.L**2\n        \n        self.x_start = self.xy(self.y_start)\n        self.x_end = self.x_end\n        self.y_start = self.y_start\n        self.y_end = self.yx(self.x_end)\n        self.x_low = min(self.x_start,self.x_end)\n        self.x_high = max(self.x_start,self.x_end)\n        self.y_low = min(self.y_start,self.y_end)\n        self.y_high = max(self.y_start,self.y_end)\n        \n        self.p_start = self.p(self.x_start)\n        self.p_end = self.p(self.x_end)\n        self.p_execution = - (self.yx(self.x_end) - self.yx(self.x_start)) / (self.x_end - self.x_start)\n        self.p_execution_truncated = self.truncate(self.p_execution)\n        self.p_starttruncated = self.truncate(self.p_start)\n        self.p_endtruncated = self.truncate(self.p_end)\n        \n        self.p_angle = -np.arctan(self.p_execution)\n        self.p_startangle = -np.arctan(self.p_start)\n        self.p_endangle = -np.arctan(self.p_end)\n        \n        self.x_in = self.truncate(self.x_end - self.x_start)\n        self.x_out = self.truncate(self.x_start - self.x_end)\n        \n        self.y_in = self.truncate(self.y_end - self.y_start)\n        self.y_out = self.truncate(self.y_start - self.y_end)\n    \n    def view_ll(self):\n        point = hv.Points((self.L, self.L)).opts(color='purple',size=10, xlim=(0,self.xmax), ylim=(0,self.ymax))\n        return point\n    \n    def view_x_start_y_start(self):\n        point = hv.Points((self.x_start, self.y_start)).opts(color='green',size=10, xlim=(0,self.xmax), ylim=(0,self.ymax))\n        return point\n    \n    def view_x_end_y_start(self):\n        point = hv.Points((self.x_end, self.y_start)).opts(color='black',size=10, xlim=(0,self.xmax), ylim=(0,self.ymax))\n        return point\n    \n    def view_end_price(self):\n        point = hv.Points((self.x_end, self.y_end)).opts(color='orange',size=10, xlim=(0,self.xmax), ylim=(0,self.ymax))\n        return point\n    \n    def view_points(self):\n        points = self.view_ll() * self.view_x_start_y_start() * self.view_x_end_y_start() * self.view_end_price()\n        return points\n    \n    def xy_curve(self):\n        xs = np.linspace(*self.param['x_end'].bounds)\n        ys = self.yx(xs)\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n    \n    def x_in_curve(self):\n        xs = np.linspace(self.x_low, self.x_high)\n        ys = [self.y_start] * len(xs)\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n    \n    def y_out_curve(self):\n        xs = np.linspace(self.x_end, self.x_end)\n        ys = np.linspace(self.y_low, self.y_high)\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n    \n    def execution_curve(self):\n        xs = np.linspace(self.x_low, self.x_high)\n        ys = self.y_start + self.y_end - self.p_execution*xs\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n    \n    def start_price_curve(self):\n        xs = np.linspace(*self.param['x_end'].bounds)\n        ys = -self.p_start * xs + 2*self.y_start\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n    \n    def end_price_curve(self):\n        xs = np.linspace(*self.param['x_end'].bounds)\n        ys = -self.p_end * xs + 2*self.y_end\n        df = pd.DataFrame({'x':xs,'y':ys})\n        return df\n        \n    def view_xy_curve(self):\n        return self.xy_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='purple')\n    \n    def view_x_in_curve(self):\n        return self.x_in_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='skyblue', line_dash='dashed')\n    \n    def view_y_out_curve(self):\n        return self.y_out_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='red', line_dash='dashed')\n    \n    def view_execution_curve(self):\n        return self.execution_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='black', line_dash='dashed')\n    \n    def view_start_price_curve(self):\n        return self.start_price_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='green', line_width=2, line_dash='dashed', alpha=0.5)\n    \n    def view_end_price_curve(self):\n        return self.end_price_curve().hvplot.line(x='x',y='y', xlim=(0,self.xmax), ylim=(0,self.ymax), color='orange', line_width=2, line_dash='dashed', alpha=0.5)\n        \n    def view_curves(self):\n        chart = self.view_xy_curve() * self.view_x_in_curve() * self.view_y_out_curve() * self.view_execution_curve() * self.view_start_price_curve() * self.view_end_price_curve()\n        return chart\n    \n    def labels_table(self):\n        labels = pd.DataFrame([\n            (self.x_start+(self.x_in/2),self.y_start, f\"X in: {self.x_in}\", \"green\"),\n            (self.x_end*1.25,self.y_start+(self.y_in/2), f\"Y out: {self.y_out}\", \"green\"),\n            ((self.x_end-self.x_start)/2+self.x_start,abs(self.y_end-self.y_start)/2, f\"Execution price:\\n{self.p_execution_truncated}\", \"green\"),\n            (self.x_start,self.y_start, f\"Start Price: {self.p_starttruncated}\", \"green\"),\n            (self.x_end,self.y_end, f\"End Price: {self.p_endtruncated}\", \"green\"),\n        ], columns=['x','y','text', 'color'])\n        return labels\n    \n    def view_labels(self):\n        return self.labels_table().hvplot.labels(x='x',y='y',text='text', cmap='color', text_baseline='bottom')\n    \n    def view_chart(self):\n        chart = self.view_points() * self.view_curves() * self.view_labels()\n        chart.opts(height=400, width=1000, title=\"Uniswap Math\")\n        return chart\n    \n    def view(self):\n        return pn.Column(self, self.view_chart)\n\n\nu = Uniswap()\n\nu.view()"
  },
  {
    "objectID": "pamm/bancor.html",
    "href": "pamm/bancor.html",
    "title": "Bancor Bonding Curve",
    "section": "",
    "text": "BondingCurve\n\n BondingCurve (**params)\n\nparams(deposit=Number, m=Number, marketcap=Number, mint=Action, mint_amount=Number, mint_price=Number, n=Number, new_price=Number, price=Number, reserve_balance=Number, reserve_ratio=Number, supply=Number, name=String) \u001b[1;32mParameters of ‘BondingCurve’ ============================ \u001b[0m \u001b[1;31mParameters changed from their default values are marked in red.\u001b[0m \u001b[1;36mSoft bound values are marked in cyan.\u001b[0m C/V= Constant/Variable, RO/RW = ReadOnly/ReadWrite, AN=Allow None\n\u001b[1;34mName Value Type Bounds Mode \u001b[0m\nsupply 80 Number (1,\u001b[1;36m 100\u001b[0m) V RW price 2 Number (0.01,\u001b[1;36m 5\u001b[0m) V RW reserve_balance 40 Number (1,\u001b[1;36m 500\u001b[0m) V RW marketcap 160 Number C RW reserve_ratio 0.25 Number C RW n 0.0 Number C RW m 0.0 Number C RW mint_amount 1 Number V RW deposit 0.0 Number C RW mint_price 0.0 Number C RW new_price 0.0 Number C RW mint &lt;function BondingCurve. at 0x… Action V RW\n\u001b[1;32mParameter docstrings: =====================\u001b[0m\n\u001b[1;34msupply: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mprice: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mreserve_balance: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmarketcap: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mreserve_ratio: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mn: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mm: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint_amount: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mdeposit: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint_price: &lt; No docstring available &gt;\u001b[0m \u001b[1;34mnew_price: &lt; No docstring available &gt;\u001b[0m \u001b[1;31mmint: &lt; No docstring available &gt;\u001b[0m\n\nb = BondingCurve()\n\n\nb.view()\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nb.price_over_supply_curve()\n\n\n\n\n\n\n\n\nSupply\nPrice\nReserve Balance\nMarketcap\nMinting Deposit\nNew Price\n\n\n\n\n0\n1.000000\n0.000004\n0.000004\n2\n0.0\n2.075941\n\n\n1\n1.099099\n0.000005\n0.000005\n2\n0.0\n2.075941\n\n\n2\n1.198198\n0.000007\n0.000007\n2\n0.0\n2.075941\n\n\n3\n1.297297\n0.000009\n0.000009\n2\n0.0\n2.075941\n\n\n4\n1.396396\n0.000011\n0.000011\n2\n0.0\n2.075941\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n99.603604\n3.859981\n0.000000\n0\n0.0\n0.000000\n\n\n996\n99.702703\n3.871514\n0.000000\n0\n0.0\n0.000000\n\n\n997\n99.801802\n3.883070\n0.000000\n0\n0.0\n0.000000\n\n\n998\n99.900901\n3.894648\n0.000000\n0\n0.0\n0.000000\n\n\n999\n100.000000\n3.906250\n0.000000\n0\n0.0\n0.000000\n\n\n\n\n1000 rows × 6 columns\n\n\n\n\nb.get_balance_deposit(mint_amount=1)\n\n2.037813476562505\n\n\n\nb.get_balance_return(burn_amount=1)\n\n1.9628115234375016\n\n\n\nb.get_mint_amount(balance_deposit=1)\n\n0.4953797060508869\n\n\n\nb.get_burn_amount(balance_return=1)\n\n0.5047570567767856\n\n\n\n- b.get_burn_amount(balance_return=-2.037813476562505)\n\n0.9999999999999964\n\n\n\n-b.get_balance_deposit(-b.get_burn_amount(2))\n\n2.000000000000007"
  }
]