# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/dune/1_tec.ipynb.

# %% auto 0
__all__ = ['TECDashboard']

# %% ../../nbs/dune/1_tec.ipynb 3
import pandas as pd
import hvplot.pandas
from .dune import DuneWrapper
import numpy as np

# %% ../../nbs/dune/1_tec.ipynb 4
class TECDashboard(DuneWrapper):
    "Interface to the TEC Dune Analytics dashboard."
    
    def __init__(self):
        super().__init__()
        self.market_information = self.MarketInformation()
        self.treasury_inflows_outflows = self.TreasuriesInflowsOutflows()
        self.reserves = self.Reserves()
        self.trades = self.Trades()
        self.abc_tributes = self.ABCTributes()
        self.conviction = self.Conviction()
        self.bonding_curve = self.BondingCurve()
    
    class MarketInformation(DuneWrapper):
    
        def mint_price(self, **params)->pd.DataFrame:
            """NOT WORKING"""
            df = self.refresh_into_dataframe(461108, **params)
            return df
        
        def honeyswap_tec_sales(self, **params)->pd.DataFrame:
            """Historic honeyswap tec sales."""
            df = self.refresh_into_dataframe(1898914, **params)
            return df
        
        def market_price(self, **params)->float:
            """Most recent honeyswap tec sale as market price."""
            return self.honeyswap_tec_sales().iloc[0]['price']
        
        def burn_price(self, **params)->pd.DataFrame:
            """NOT WORKING"""
            df = self.refresh_into_dataframe(421552, **params)
            return df
        
        def price_chart(self, **params)->pd.DataFrame:
            """Historic Mint, Burn, and Market Prices"""
            df = self.refresh_into_dataframe(1898885, **params)
            df = df.replace('<nil>', np.nan).bfill()
            return df
        
        def holders_and_supply(self, **params)->pd.Series:
            """Number of TEC Holders and total supply."""
            df = self.refresh_into_dataframe(1898886, **params).iloc[0]
            return df
        
        def total_holders(self, **params)->float:
            """Number of TEC Holders."""
            return self.holders_and_supply(**params)['total_holders']
        
        def supply(self, **params)->float:
            """TEC Supply."""
            return self.holders_and_supply(**params)['supply']
        
        def holders_over_time(self, **params)->pd.DataFrame:
            """TEC holders over time."""
            df = self.refresh_into_dataframe(1898887, **params)
            return df
        
        def holders_distribution(self, **params)->pd.DataFrame:
            """Distribution of holders and balances."""
            df = self.refresh_into_dataframe(1898888, **params)
            return df
        
        def view_price_chart(self, normalize=False, **params):
            tec_price_chart = self.price_chart()
            if normalize:
                columns = ['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']
                tec_price_chart[columns] = tec_price_chart[columns].astype(float) / tec_price_chart[columns].iloc[0].astype(float)
            tec_price_chart['block_date'] = pd.to_datetime(tec_price_chart['block_date'])
            tec_price_chart = tec_price_chart.replace('<nil>', np.nan).bfill()
            tec_price_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']] = tec_price_chart[['avg_mint_price', 'avg_burn_price', 'avg_mkt_price']].astype(float)
            price_chart_view = tec_price_chart.hvplot.line(y=['avg_mint_price', 'avg_burn_price', 'avg_mkt_price'], x='block_date', title="TEC Price Chart")
            return price_chart_view
        

    class TreasuriesInflowsOutflows(DuneWrapper):
        
        def multisig_values_over_time(self, **params):
            """NOT WORKING"""
            df = self.refresh_into_dataframe(945136, **params)
            return df

        def multisig_treasuries(self, **params):
            """NOT WORKING"""
            df = self.refresh_into_dataframe(394403, **params)
            return df

        def multisig_distribution(self, **params):
            """NOT WORKING"""
            df = self.refresh_into_dataframe(427713, **params)
            return df

        def multisig_treasuries_movement(self, **params):
            """NOT WORKING"""
            df = self.refresh_into_dataframe(394987, **params)
            return df
        
    class Reserves(DuneWrapper):

        def reserve_pool(self, **params)->pd.Series:
            """Reserve pool information."""

            # Ensure there is an end date in the future to get accurate results.
            if type(params.get('params')) is list:
                params['params'] += [{
                "type": "date",
                "name": "2. End Date",
                "value": "2055-05-04 00:00:00",}]
            else:
                params['params'] = [{
                "type": "date",
                "name": "2. End Date",
                "value": "2055-05-04 00:00:00",}]
            
            df = self.refresh_into_dataframe(1752257, **params).iloc[0]
            return df
        
        def total_pool_value(self, **params)->float:
            return self.reserve_pool(**params)['total_pool_value']
        
        def reserve_pool_value(self, **params)->float:
            return self.reserve_pool(**params)['reserve_pool_value']
        
        def common_pool_value(self, **params)->float:
            return self.reserve_pool(**params)['common_pool_value']
        
        def commons_pool_balance_over_time(self, **params)->pd.DataFrame:
            """Common pool balance over time."""
            df = self.refresh_into_dataframe(1754471, **params)
            return df
        
        def reserve_balance_over_time(self, **params)->pd.DataFrame:
            """Reserve balance over time."""
            df = self.refresh_into_dataframe(1754573, **params)
            return df
        
    class Trades(DuneWrapper):
        
        def abc_top_ten_trades(self, **params):
            df = self.refresh_into_dataframe(1855820, **params)
            return df
        
        def honeyswap_top_ten_trades(self, **params):
            df = self.refresh_into_dataframe(1865657, **params)
            return df
        
        def abc_token_sales(self, **params):
            df = self.refresh_into_dataframe(1865890, **params)
            return df
        
        def honeyswap_tec_sales(self, **params):
            df = self.refresh_into_dataframe(1866227, **params)
            return df
        
    class ABCTributes(DuneWrapper):
        
        def tribute_distribution(self, **params):
            df = self.refresh_into_dataframe(1646841, **params)
            return df
        
    class Conviction(DuneWrapper):
        
        def tec_proposals(self, **params):
            df = self.refresh_into_dataframe(1849767, **params)
            return df
        
    class BondingCurve(DuneWrapper):
        
        def total_liquidity_over_time_honeyswap(self, **params):
            df = self.refresh_into_dataframe(2437505, **params)
            return df
        
        def total_liquidity_over_time_honeyswap_aggregated(self, **params):
            df = self.refresh_into_dataframe(2437591, **params)
            return df
        
        def TEC_total_supply(self, **params):
            df = self.refresh_into_dataframe(2422062, **params)
            return df
