# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/pamm/02_abc.ipynb.

# %% auto 0
__all__ = ['AugmentedBondingCurve']

# %% ../../nbs/pamm/02_abc.ipynb 3
import param as pm
import panel as pn
import pandas as pd
import numpy as np
import hvplot.pandas
from .bancor import BondingCurve
pn.extension()

# %% ../../nbs/pamm/02_abc.ipynb 4
class AugmentedBondingCurve(BondingCurve):
    entry_tribute = pm.Magnitude(0.22, step=0.01)
    exit_tribute  = pm.Magnitude(0.02, step=0.01)
    total_mint_deposit = pm.Number(constant=True)
    total_mint_price = pm.Number(constant=True)
    mint_tribute  = pm.Number(constant=True)
    common_pool   = pm.Number(0, constant=True, softbounds=(0,1000), bounds=(0, None))
    
    def __init__(self, **params):
        super().__init__(**params)
        self.update_deposit()
        self.set_bounds()
        
    def set_bounds(self):
        self.param['supply'].softbounds = (self.supply/2, self.supply*1.5)
        self.param['reserve_balance'].softbounds = (self.reserve_balance/2, self.reserve_balance*1.5)
        self.param['common_pool'].softbounds = (self.common_pool/2, self.common_pool*1.5+100)
        self.param['mint_amount'].step = 1
        self.param['mint_amount'].softbounds = (-self.supply/5, self.supply/5)
        
    @pm.depends('entry_tribute', 'exit_tribute', 'deposit', watch=True)
    def update_deposit(self):
        with pm.edit_constant(self):
            if self.deposit > 0:
                self.total_mint_deposit = self.deposit / (1 - self.entry_tribute)
                self.total_mint_price = self.total_mint_deposit / self.mint_amount
                self.mint_tribute = self.total_mint_deposit - self.deposit
            elif self.deposit < 0:
                self.total_mint_deposit = self.deposit - self.deposit * self.exit_tribute
                self.total_mint_price = self.total_mint_deposit / self.mint_amount
                self.mint_tribute = self.total_mint_deposit - self.deposit
            else:
                self.total_mint_deposit = self.deposit
                self.total_mint_price = self.mint_price
                self.mint_tribute = 0
                
    def _mint(self):
        with pm.edit_constant(self):
            self.common_pool += self.mint_tribute
        super()._mint()
        
    def total_price_curve(self):
        supply = np.linspace(self.param['supply'].softbounds[0],self.param['supply'].softbounds[1]-1, num=1000)
        mint_amount = supply - self.supply
        deposit = self.get_balance_deposit(mint_amount)
        mint_total_price = deposit / (1 - self.entry_tribute) / mint_amount
        burn_total_price = (deposit - deposit * self.exit_tribute) / mint_amount
        total_price = np.where(supply > self.supply, mint_total_price, burn_total_price)
        df = pd.DataFrame({
            'Supply': supply, 
            'Total Mint Price': total_price, 
        })
        return df
    
    def view_total_price_curve(self):
        total_price_curve = self.total_price_curve()
        chart = total_price_curve.hvplot.line(
            x='Supply',
            y='Total Mint Price',
            color='brown', 
            label='Mint Price with Tribute',
            line_dash='dashed',
        )
        mint_price = (self.supply+self.mint_amount, self.total_mint_price, 'Mint Price With Tribute')
        points = pd.DataFrame([mint_price], columns=['x','y','label']).hvplot.scatter(
            x='x',
            y='y',
            by='label',
            color=['brown'],
            size=80,) 
        return chart * points
    
    @pm.depends('reserve_balance', 'supply', 'price', 'mint_amount', 'entry_tribute', 'exit_tribute')
    def view_chart(self):
        curve = self.view_price_over_supply_curve()
        points = self.view_points()
        total_price_curve = self.view_total_price_curve()
        chart = curve * total_price_curve * points
        chart.opts(
            title="Bonding Curve Math",
            legend_position="top_right",
            xlim=self.param['supply'].softbounds,
            ylim=self.param['price'].softbounds,
            width=640,
            height=640,
        )
        return chart

