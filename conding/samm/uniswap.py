# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/samm/1-uniswap-mathv2.ipynb.

# %% auto 0
__all__ = ['Uniswap']

# %% ../../nbs/samm/1-uniswap-mathv2.ipynb 3
import param as pm
import panel as pn
import pandas as pd
import numpy as np
import hvplot.pandas
import holoviews as hv

# %% ../../nbs/samm/1-uniswap-mathv2.ipynb 4
class Uniswap(pm.Parameterized):
    K = pm.Number(constant=True, bounds=(0, None))
    L = pm.Number(softbounds=(1, 100), bounds=(0, None), step=1)
    x = pm.Number(20, softbounds=(1, 100), bounds=(0, None), step=1)
    y = pm.Number(80, softbounds=(1, 100), bounds=(0, None), step=1)
    price_x_y = pm.Number(constant=True)
    execution_price_x_y = pm.Number(constant=True)
    x_in = pm.Number(1, softbounds=(-100,100), step=0.1)
    y_out = pm.Number(constant=True)
    switch_xy = pm.Action(lambda self: self._switch_xy())
    swap = pm.Action(lambda self: self._swap())
    _updating = pm.Boolean(False, precedence=-1)
    
    def __init__(self, **params):
        super().__init__(**params)
        self.update_xy()
        self.update_x_in()
    
    @pm.depends('x', 'y', watch=True)
    def update_xy(self):
        if not self._updating:
            self._updating = True
            with pm.edit_constant(self):
                self.K = self.x * self.y
                self.L = np.sqrt(self.K)
                self.price_x_y = self.price_yx(self.x)
            self.param['x_in'].bounds = [-self.x+1,None]
            self.x_in = self.param['x_in'].crop_to_bounds(self.x_in)
            self._updating = False
            
    @pm.depends('L', watch=True)
    def update_L(self):
        if not self._updating:
            self._updating = True
            with pm.edit_constant(self):
                self.K = self.L**2
            new_y = np.sqrt((self.y / self.x) * self.K)
            new_x = np.sqrt((self.x / self.y) * self.K)
            self.y = new_y
            self.x = new_x
            self._updating = False
            
    @pm.depends('x_in', 'L', watch=True)
    def update_x_in(self):
        with pm.edit_constant(self):
            self.y_out = self.y - self.liquidity_yx(self.x+self.x_in)
            if self.x_in == 0:
                self.execution_price_x_y = self.price_x_y
            else:
                self.execution_price_x_y = self.y_out / self.x_in
            
    def _switch_xy(self):
        new_y = self.x
        new_x = self.y
        new_x_in = -self.y_out
        with pm.parameterized.batch_call_watchers(self):
            self.y = new_y
            self.x = new_x
            self.param['x_in'].bounds = [-self.x+1,None]
            self.x_in = self.param['x_in'].crop_to_bounds(self.x_in)
            self.x_in = new_x_in
            
    def _swap(self):
        new_y = self.y - self.y_out
        new_x = self.x + self.x_in
        with pm.parameterized.discard_events(self):
            self.y = new_y
            self.x = new_x
        self.param.trigger('y','x')
            
    def liquidity_yx(self, x):
        return self.K / x
    
    def price_yx(self, x):
        return self.K / x**2
    
    def xy_curve(self):
        xs = np.linspace(*self.param['x'].softbounds, num=1000)
        ys = self.liquidity_yx(xs)
        df = pd.DataFrame({'x':xs,'y':ys})
        return df
    
    def view_curves(self):
        xy_curve = self.xy_curve().hvplot.line(x='x',y='y', label='xy=k')
        xy_curve.opts( 
            color='purple', 
            xlim=self.param['x'].softbounds, 
            ylim=self.param['y'].softbounds,
        )
        return xy_curve
    
    def view_points(self):
        ll = (self.L, self.L, 'Liquidity')
        xy_start = (self.x, self.y, 'xy')
        xy_end   = (self.x+self.x_in, self.liquidity_yx(self.x+self.x_in), 'xy_end')
        points = pd.DataFrame([ll, xy_start, xy_end], columns=['x','y','label']).hvplot.scatter(
            x='x',
            y='y',
            by='label',
            color=['purple', 'green', 'orange'],
            size=120,)        
        return points
    
    @pm.depends('L', 'x_in')
    def view_chart(self):
        points = self.view_points()
        curves = self.view_curves()
        chart = curves * points
        chart.opts(
            title="Uniswap Math",
            width=580,
            height=640,
            legend_position="top_right",
        )
        return chart

    def view(self):
        return pn.Row(self, self.view_chart)
    
    def reset(self):
        with pm.edit_constant(self):
            for param in self.param:
                if param not in ["name"]:
                    setattr(self, param, self.param[param].default)
